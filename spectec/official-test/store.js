
'use strict';

if (typeof console === 'undefined') {
  var Console = function () {
      this.log = function(msg) { debug(msg); };
  };
  var console = new Console();
}

let hostrefs = {};
let hostsym = Symbol("hostref");
function hostref(s) {
  if (! (s in hostrefs)) hostrefs[s] = {[hostsym]: s};
  return hostrefs[s];
}
function eq_ref(x, y) {
  return x === y ? 1 : 0;
}

let spectest = {
  hostref: hostref,
  eq_ref: eq_ref,
  print: console.log.bind(console),
  print_i32: console.log.bind(console),
  print_i64: console.log.bind(console),
  print_i32_f32: console.log.bind(console),
  print_f64_f64: console.log.bind(console),
  print_f32: console.log.bind(console),
  print_f64: console.log.bind(console),
  global_i32: 666,
  global_i64: 666n,
  global_f32: 666.6,
  global_f64: 666.6,
  table: new WebAssembly.Table({initial: 10, maximum: 20, element: 'anyfunc'}),
  memory: new WebAssembly.Memory({initial: 1, maximum: 2})
};

let handler = {
  get(target, prop) {
    return (prop in target) ?  target[prop] : {};
  }
};
let registry = new Proxy({spectest}, handler);

function register(name, instance) {
  registry[name] = instance.exports;
}

function module(bytes, valid = true) {
  let buffer = new ArrayBuffer(bytes.length);
  let view = new Uint8Array(buffer);
  for (let i = 0; i < bytes.length; ++i) {
    view[i] = bytes.charCodeAt(i);
  }
  let validated;
  try {
    validated = WebAssembly.validate(buffer);
  } catch (e) {
    throw new Error("Wasm validate throws");
  }
  if (validated !== valid) {
    if (!validated) WebAssembly.compile(buffer).catch(e => console.log(e));
    throw new Error("Wasm validate failure" + (valid ? "" : " expected"));
  }
  return new WebAssembly.Module(buffer);
}

function instance(mod, imports = registry) {
  return new WebAssembly.Instance(mod, imports);
}

function call(instance, name, args) {
  return instance.exports[name](...args);
}

function get(instance, name) {
  let v = instance.exports[name];
  return (v instanceof WebAssembly.Global) ? v.value : v;
}

function exports(instance) {
  return {module: instance.exports, spectest: spectest};
}

function run(action) {
  action();
}

function assert_malformed(bytes) {
  try { module(bytes, false) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm decoding failure expected");
}

function assert_malformed_custom(bytes) {
  return;
}

function assert_invalid(bytes) {
  try { module(bytes, false) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm validation failure expected");
}

function assert_invalid_custom(bytes) {
  return;
}

function assert_unlinkable(mod) {
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof WebAssembly.LinkError) return;
  }
  throw new Error("Wasm linking failure expected");
}

function assert_uninstantiable(mod) {
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
    throw new Error("Wasm trap expected, but got: " + e);
  }
  throw new Error("Wasm trap expected");
}

function assert_uninstantiable_inlined(bytes) {
  let mod = module(bytes);
  assert_uninstantiable(mod);
}

function assert_trap(action) {
  try { action() } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
    throw new Error("Wasm trap expected, but got: " + e);
  }
  throw new Error("Wasm trap expected");
}

function assert_exception(action) {
  try { action() } catch (e) { return; }
  throw new Error("exception expected");
}

let StackOverflow;
try { (function f() { 1 + f() })() } catch (e) { StackOverflow = e.constructor }

function assert_exhaustion(action) {
  try { action() } catch (e) {
    if (e instanceof StackOverflow) return;
  }
  throw new Error("Wasm resource exhaustion expected");
}

function assert_return(action, ...expected) {
  let actual = action();
  if (actual === undefined) {
    actual = [];
  } else if (!Array.isArray(actual)) {
    actual = [actual];
  }
  if (actual.length !== expected.length) {
    throw new Error(expected.length + " value(s) expected, got " + actual.length);
  }
  for (let i = 0; i < actual.length; ++i) {
    switch (expected[i]) {
      case "nan:canonical":
      case "nan:arithmetic":
      case "nan:any":
        // Note that JS can't reliably distinguish different NaN values,
        // so there's no good way to test that it's a canonical NaN.
        if (!Number.isNaN(actual[i])) {
          throw new Error("Wasm NaN return value expected, got " + actual[i]);
        };
        return;
      case "ref.i31":
        if (typeof actual[i] !== "number" || (actual[i] & 0x7fffffff) !== actual[i]) {
          throw new Error("Wasm i31 return value expected, got " + actual[i]);
        };
        return;
      case "ref.any":
      case "ref.eq":
      case "ref.struct":
      case "ref.array":
        // For now, JS can't distinguish exported Wasm GC values,
        // so we only test for object.
        if (typeof actual[i] !== "object") {
          throw new Error("Wasm object return value expected, got " + actual[i]);
        };
        return;
      case "ref.func":
        if (typeof actual[i] !== "function") {
          throw new Error("Wasm function return value expected, got " + actual[i]);
        };
        return;
      case "ref.extern":
        if (actual[i] === null) {
          throw new Error("Wasm reference return value expected, got " + actual[i]);
        };
        return;
      case "ref.null":
        if (actual[i] !== null) {
          throw new Error("Wasm null return value expected, got " + actual[i]);
        };
        return;
      default:
        if (!Object.is(actual[i], expected[i])) {
          throw new Error("Wasm return value " + expected[i] + " expected, got " + actual[i]);
        };
    }
  }
}

// store.wast:3
let $$1 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x01\x7f\x01\x7e\x60\x02\x7f\x7e\x00\x03\x85\x80\x80\x80\x00\x04\x00\x00\x01\x01\x05\x85\x80\x80\x80\x00\x02\x00\x01\x00\x01\x07\xa3\x80\x80\x80\x00\x04\x05\x6c\x6f\x61\x64\x31\x00\x00\x05\x6c\x6f\x61\x64\x32\x00\x01\x06\x73\x74\x6f\x72\x65\x31\x00\x02\x06\x73\x74\x6f\x72\x65\x32\x00\x03\x0a\xb7\x80\x80\x80\x00\x04\x87\x80\x80\x80\x00\x00\x20\x00\x29\x03\x00\x0b\x88\x80\x80\x80\x00\x00\x20\x00\x29\x43\x01\x00\x0b\x89\x80\x80\x80\x00\x00\x20\x00\x20\x01\x37\x03\x00\x0b\x8a\x80\x80\x80\x00\x00\x20\x00\x20\x01\x37\x43\x01\x00\x0b");

// store.wast:3
let $1 = instance($$1);

// store.wast:22
run(() => call($1, "store1", [0, 1n]));

// store.wast:23
run(() => call($1, "store2", [0, 2n]));

// store.wast:24
assert_return(() => call($1, "load1", [0]), 1n);

// store.wast:25
assert_return(() => call($1, "load2", [0]), 2n);

// store.wast:28
let $$2 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x01\x7f\x01\x7e\x60\x02\x7f\x7e\x00\x03\x83\x80\x80\x80\x00\x02\x00\x01\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\x96\x80\x80\x80\x00\x03\x03\x6d\x65\x6d\x02\x00\x04\x6c\x6f\x61\x64\x00\x00\x05\x73\x74\x6f\x72\x65\x00\x01\x0a\x9b\x80\x80\x80\x00\x02\x87\x80\x80\x80\x00\x00\x20\x00\x29\x03\x00\x0b\x89\x80\x80\x80\x00\x00\x20\x00\x20\x01\x37\x03\x00\x0b");
let $M1 = $$2;

// store.wast:28
let $2 = instance($M1);
let M1 = $2;

// store.wast:38
register("M1", $2)

// store.wast:40
let $$3 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x01\x7f\x01\x7e\x60\x02\x7f\x7e\x00\x03\x83\x80\x80\x80\x00\x02\x00\x01\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\x96\x80\x80\x80\x00\x03\x03\x6d\x65\x6d\x02\x00\x04\x6c\x6f\x61\x64\x00\x00\x05\x73\x74\x6f\x72\x65\x00\x01\x0a\x9b\x80\x80\x80\x00\x02\x87\x80\x80\x80\x00\x00\x20\x00\x29\x03\x00\x0b\x89\x80\x80\x80\x00\x00\x20\x00\x20\x01\x37\x03\x00\x0b");
let $M2 = $$3;

// store.wast:40
let $3 = instance($M2);
let M2 = $3;

// store.wast:50
register("M2", $3)

// store.wast:52
run(() => call(M1, "store", [0, 1n]));

// store.wast:53
run(() => call(M2, "store", [0, 2n]));

// store.wast:54
assert_return(() => call(M1, "load", [0]), 1n);

// store.wast:55
assert_return(() => call(M2, "load", [0]), 2n);

// store.wast:57
let $$4 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x01\x7f\x01\x7e\x60\x02\x7f\x7e\x00\x02\x95\x80\x80\x80\x00\x02\x02\x4d\x31\x03\x6d\x65\x6d\x02\x00\x01\x02\x4d\x32\x03\x6d\x65\x6d\x02\x00\x01\x03\x85\x80\x80\x80\x00\x04\x00\x00\x01\x01\x07\xa3\x80\x80\x80\x00\x04\x05\x6c\x6f\x61\x64\x31\x00\x00\x05\x6c\x6f\x61\x64\x32\x00\x01\x06\x73\x74\x6f\x72\x65\x31\x00\x02\x06\x73\x74\x6f\x72\x65\x32\x00\x03\x0a\xb7\x80\x80\x80\x00\x04\x87\x80\x80\x80\x00\x00\x20\x00\x29\x03\x00\x0b\x88\x80\x80\x80\x00\x00\x20\x00\x29\x43\x01\x00\x0b\x89\x80\x80\x80\x00\x00\x20\x00\x20\x01\x37\x03\x00\x0b\x8a\x80\x80\x80\x00\x00\x20\x00\x20\x01\x37\x43\x01\x00\x0b");

// store.wast:57
let $4 = instance($$4);

// store.wast:76
run(() => call($4, "store1", [0, 1n]));

// store.wast:77
run(() => call($4, "store2", [0, 2n]));

// store.wast:78
assert_return(() => call($4, "load1", [0]), 1n);

// store.wast:79
assert_return(() => call($4, "load2", [0]), 2n);

// store.wast:82
let $$5 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x05\x83\x80\x80\x80\x00\x01\x00\x02\x07\x87\x80\x80\x80\x00\x01\x03\x6d\x65\x6d\x02\x00");

// store.wast:82
let $5 = instance($$5);

// store.wast:85
register("M", $5)

// store.wast:87
let $$6 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x01\x7f\x01\x7f\x60\x00\x00\x02\x8a\x80\x80\x80\x00\x01\x01\x4d\x03\x6d\x65\x6d\x02\x00\x02\x03\x85\x80\x80\x80\x00\x04\x00\x00\x01\x01\x05\x83\x80\x80\x80\x00\x01\x00\x03\x07\xad\x80\x80\x80\x00\x04\x05\x72\x65\x61\x64\x31\x00\x00\x05\x72\x65\x61\x64\x32\x00\x01\x0b\x63\x6f\x70\x79\x2d\x31\x2d\x74\x6f\x2d\x32\x00\x02\x0b\x63\x6f\x70\x79\x2d\x32\x2d\x74\x6f\x2d\x31\x00\x03\x0a\xf0\x80\x80\x80\x00\x04\x87\x80\x80\x80\x00\x00\x20\x00\x2d\x00\x00\x0b\x88\x80\x80\x80\x00\x00\x20\x00\x2d\x40\x01\x00\x0b\xa6\x80\x80\x80\x00\x01\x01\x7f\x41\x14\x21\x00\x03\x40\x20\x00\x41\x17\x46\x0d\x01\x20\x00\x20\x00\x2d\x00\x00\x3a\x40\x01\x00\x20\x00\x41\x01\x6a\x21\x00\x0c\x00\x0b\x0b\xa6\x80\x80\x80\x00\x01\x01\x7f\x41\x32\x21\x00\x03\x40\x20\x00\x41\x36\x46\x0d\x01\x20\x00\x20\x00\x2d\x40\x01\x00\x3a\x00\x00\x20\x00\x41\x01\x6a\x21\x00\x0c\x00\x0b\x0b\x0b\x96\x80\x80\x80\x00\x02\x00\x41\x14\x0b\x05\x01\x02\x03\x04\x05\x02\x01\x41\x32\x0b\x05\x0a\x0b\x0c\x0d\x0e");

// store.wast:87
let $6 = instance($$6);

// store.wast:124
assert_return(() => call($6, "read2", [20]), 0);

// store.wast:125
assert_return(() => call($6, "read2", [21]), 0);

// store.wast:126
assert_return(() => call($6, "read2", [22]), 0);

// store.wast:127
assert_return(() => call($6, "read2", [23]), 0);

// store.wast:128
assert_return(() => call($6, "read2", [24]), 0);

// store.wast:129
run(() => call($6, "copy-1-to-2", []));

// store.wast:130
assert_return(() => call($6, "read2", [20]), 1);

// store.wast:131
assert_return(() => call($6, "read2", [21]), 2);

// store.wast:132
assert_return(() => call($6, "read2", [22]), 3);

// store.wast:133
assert_return(() => call($6, "read2", [23]), 0);

// store.wast:134
assert_return(() => call($6, "read2", [24]), 0);

// store.wast:136
assert_return(() => call($6, "read1", [50]), 0);

// store.wast:137
assert_return(() => call($6, "read1", [51]), 0);

// store.wast:138
assert_return(() => call($6, "read1", [52]), 0);

// store.wast:139
assert_return(() => call($6, "read1", [53]), 0);

// store.wast:140
assert_return(() => call($6, "read1", [54]), 0);

// store.wast:141
run(() => call($6, "copy-2-to-1", []));

// store.wast:142
assert_return(() => call($6, "read1", [50]), 10);

// store.wast:143
assert_return(() => call($6, "read1", [51]), 11);

// store.wast:144
assert_return(() => call($6, "read1", [52]), 12);

// store.wast:145
assert_return(() => call($6, "read1", [53]), 13);

// store.wast:146
assert_return(() => call($6, "read1", [54]), 0);

// store.wast:151
let $$7 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x8a\x80\x80\x80\x00\x09\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\x97\x81\x80\x80\x00\x09\x0e\x61\x73\x2d\x62\x6c\x6f\x63\x6b\x2d\x76\x61\x6c\x75\x65\x00\x00\x0d\x61\x73\x2d\x6c\x6f\x6f\x70\x2d\x76\x61\x6c\x75\x65\x00\x01\x0b\x61\x73\x2d\x62\x72\x2d\x76\x61\x6c\x75\x65\x00\x02\x0e\x61\x73\x2d\x62\x72\x5f\x69\x66\x2d\x76\x61\x6c\x75\x65\x00\x03\x13\x61\x73\x2d\x62\x72\x5f\x69\x66\x2d\x76\x61\x6c\x75\x65\x2d\x63\x6f\x6e\x64\x00\x04\x11\x61\x73\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x2d\x76\x61\x6c\x75\x65\x00\x05\x0f\x61\x73\x2d\x72\x65\x74\x75\x72\x6e\x2d\x76\x61\x6c\x75\x65\x00\x06\x0a\x61\x73\x2d\x69\x66\x2d\x74\x68\x65\x6e\x00\x07\x0a\x61\x73\x2d\x69\x66\x2d\x65\x6c\x73\x65\x00\x08\x0a\xac\x81\x80\x80\x00\x09\x8c\x80\x80\x80\x00\x00\x02\x40\x41\x00\x41\x01\x36\x02\x00\x0b\x0b\x8c\x80\x80\x80\x00\x00\x03\x40\x41\x00\x41\x01\x36\x02\x00\x0b\x0b\x8e\x80\x80\x80\x00\x00\x02\x40\x41\x00\x41\x01\x36\x02\x00\x0c\x00\x0b\x0b\x90\x80\x80\x80\x00\x00\x02\x40\x41\x00\x41\x01\x36\x02\x00\x41\x01\x0d\x00\x0b\x0b\x90\x80\x80\x80\x00\x00\x02\x40\x41\x06\x41\x00\x41\x01\x36\x02\x00\x0d\x00\x0b\x0b\x91\x80\x80\x80\x00\x00\x02\x40\x41\x00\x41\x01\x36\x02\x00\x41\x01\x0e\x00\x00\x0b\x0b\x8a\x80\x80\x80\x00\x00\x41\x00\x41\x01\x36\x02\x00\x0f\x0b\x8e\x80\x80\x80\x00\x00\x41\x01\x04\x40\x41\x00\x41\x01\x36\x02\x00\x0b\x0b\x8f\x80\x80\x80\x00\x00\x41\x00\x04\x40\x05\x41\x00\x41\x01\x36\x02\x00\x0b\x0b");

// store.wast:151
let $7 = instance($$7);

// store.wast:192
assert_return(() => call($7, "as-block-value", []));

// store.wast:193
assert_return(() => call($7, "as-loop-value", []));

// store.wast:195
assert_return(() => call($7, "as-br-value", []));

// store.wast:196
assert_return(() => call($7, "as-br_if-value", []));

// store.wast:197
assert_return(() => call($7, "as-br_if-value-cond", []));

// store.wast:198
assert_return(() => call($7, "as-br_table-value", []));

// store.wast:200
assert_return(() => call($7, "as-return-value", []));

// store.wast:202
assert_return(() => call($7, "as-if-then", []));

// store.wast:203
assert_return(() => call($7, "as-if-else", []));

// store.wast:205
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// store.wast:212
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// store.wast:220
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// store.wast:228
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// store.wast:235
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// store.wast:243
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// store.wast:250
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e");

// store.wast:259
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7f\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x8f\x80\x80\x80\x00\x01\x89\x80\x80\x80\x00\x00\x41\x00\x41\x01\x36\x02\x00\x0b");

// store.wast:263
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7e\x01\x7e\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x8f\x80\x80\x80\x00\x01\x89\x80\x80\x80\x00\x00\x41\x00\x42\x01\x37\x03\x00\x0b");

// store.wast:267
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7d\x01\x7d\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x41\x00\x43\x00\x00\x80\x3f\x38\x02\x00\x0b");

// store.wast:271
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7c\x01\x7c\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x96\x80\x80\x80\x00\x01\x90\x80\x80\x80\x00\x00\x41\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x39\x03\x00\x0b");

// store.wast:275
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7f\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x8f\x80\x80\x80\x00\x01\x89\x80\x80\x80\x00\x00\x41\x00\x41\x01\x3a\x00\x00\x0b");

// store.wast:279
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7f\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x8f\x80\x80\x80\x00\x01\x89\x80\x80\x80\x00\x00\x41\x00\x41\x01\x3b\x01\x00\x0b");

// store.wast:283
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7e\x01\x7e\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x8f\x80\x80\x80\x00\x01\x89\x80\x80\x80\x00\x00\x41\x00\x42\x01\x3c\x00\x00\x0b");

// store.wast:287
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7e\x01\x7e\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x8f\x80\x80\x80\x00\x01\x89\x80\x80\x80\x00\x00\x41\x00\x42\x01\x3d\x01\x00\x0b");

// store.wast:291
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7e\x01\x7e\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x8f\x80\x80\x80\x00\x01\x89\x80\x80\x80\x00\x00\x41\x00\x42\x01\x3e\x02\x00\x0b");

// store.wast:297
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x8b\x80\x80\x80\x00\x01\x85\x80\x80\x80\x00\x00\x36\x02\x00\x0b");

// store.wast:306
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x8d\x80\x80\x80\x00\x01\x87\x80\x80\x80\x00\x00\x41\x00\x36\x02\x00\x0b");

// store.wast:315
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x41\x00\x41\x00\x02\x40\x36\x02\x00\x0b\x0b");

// store.wast:325
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x41\x00\x02\x40\x41\x00\x36\x02\x00\x0b\x0b");

// store.wast:335
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x41\x00\x41\x00\x03\x40\x36\x02\x00\x0b\x0b");

// store.wast:345
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x41\x00\x03\x40\x41\x00\x36\x02\x00\x0b\x0b");

// store.wast:355
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x41\x00\x41\x00\x04\x40\x36\x02\x00\x0b\x0b");

// store.wast:365
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x41\x00\x04\x40\x41\x00\x36\x02\x00\x0b\x0b");

// store.wast:375
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x95\x80\x80\x80\x00\x01\x8f\x80\x80\x80\x00\x00\x41\x00\x41\x00\x04\x7f\x41\x00\x05\x36\x02\x00\x0b\x0b");

// store.wast:385
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x95\x80\x80\x80\x00\x01\x8f\x80\x80\x80\x00\x00\x41\x00\x04\x7f\x41\x00\x05\x41\x00\x36\x02\x00\x0b\x0b");

// store.wast:395
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x94\x80\x80\x80\x00\x01\x8e\x80\x80\x80\x00\x00\x41\x00\x41\x00\x02\x40\x36\x02\x00\x0c\x00\x0b\x0b");

// store.wast:405
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x94\x80\x80\x80\x00\x01\x8e\x80\x80\x80\x00\x00\x41\x00\x02\x40\x41\x00\x36\x02\x00\x0c\x00\x0b\x0b");

// store.wast:415
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x96\x80\x80\x80\x00\x01\x90\x80\x80\x80\x00\x00\x41\x00\x41\x00\x02\x40\x36\x02\x00\x41\x01\x0d\x00\x0b\x0b");

// store.wast:425
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x96\x80\x80\x80\x00\x01\x90\x80\x80\x80\x00\x00\x41\x00\x02\x40\x41\x00\x36\x02\x00\x41\x01\x0d\x00\x0b\x0b");

// store.wast:435
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x95\x80\x80\x80\x00\x01\x8f\x80\x80\x80\x00\x00\x41\x00\x41\x00\x02\x40\x36\x02\x00\x0e\x00\x00\x0b\x0b");

// store.wast:445
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x95\x80\x80\x80\x00\x01\x8f\x80\x80\x80\x00\x00\x41\x00\x02\x40\x41\x00\x36\x02\x00\x0e\x00\x00\x0b\x0b");

// store.wast:455
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x8c\x80\x80\x80\x00\x01\x86\x80\x80\x80\x00\x00\x36\x02\x00\x0f\x0b");

// store.wast:464
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x8e\x80\x80\x80\x00\x01\x88\x80\x80\x80\x00\x00\x41\x00\x36\x02\x00\x0f\x0b");

// store.wast:473
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x90\x80\x80\x80\x00\x01\x8a\x80\x80\x80\x00\x00\x36\x02\x00\x41\x01\x41\x02\x1b\x0b");

// store.wast:482
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x41\x00\x36\x02\x00\x41\x01\x41\x02\x1b\x0b");

// store.wast:491
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7f\x01\x7f\x03\x83\x80\x80\x80\x00\x02\x00\x01\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x96\x80\x80\x80\x00\x02\x87\x80\x80\x80\x00\x00\x36\x02\x00\x10\x01\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b");

// store.wast:501
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7f\x01\x7f\x03\x83\x80\x80\x80\x00\x02\x00\x01\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x98\x80\x80\x80\x00\x02\x89\x80\x80\x80\x00\x00\x41\x00\x36\x02\x00\x10\x01\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b");

// store.wast:511
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x01\x7f\x01\x7f\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x01\x04\x85\x80\x80\x80\x00\x01\x70\x01\x01\x01\x05\x83\x80\x80\x80\x00\x01\x00\x01\x09\x89\x80\x80\x80\x00\x01\x04\x41\x00\x0b\x01\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x8d\x80\x80\x80\x00\x00\x02\x7f\x36\x02\x00\x41\x00\x11\x00\x00\x0b\x0b");

// store.wast:527
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x01\x7f\x01\x7f\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x01\x04\x85\x80\x80\x80\x00\x01\x70\x01\x01\x01\x05\x83\x80\x80\x80\x00\x01\x00\x01\x09\x89\x80\x80\x80\x00\x01\x04\x41\x00\x0b\x01\xd2\x00\x0b\x0a\x9e\x80\x80\x80\x00\x02\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x8f\x80\x80\x80\x00\x00\x02\x7f\x41\x00\x36\x02\x00\x41\x00\x11\x00\x00\x0b\x0b");

// store.wast:547
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x43\x00\x00\x00\x00\x41\x00\x36\x02\x00\x0b");

// store.wast:548
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x43\x00\x00\x00\x00\x41\x00\x3a\x00\x00\x0b");

// store.wast:549
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x43\x00\x00\x00\x00\x41\x00\x3b\x01\x00\x0b");

// store.wast:550
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x43\x00\x00\x00\x00\x41\x00\x37\x03\x00\x0b");

// store.wast:551
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x43\x00\x00\x00\x00\x42\x00\x3c\x00\x00\x0b");

// store.wast:552
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x43\x00\x00\x00\x00\x42\x00\x3d\x01\x00\x0b");

// store.wast:553
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x43\x00\x00\x00\x00\x42\x00\x3e\x02\x00\x0b");

// store.wast:554
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x95\x80\x80\x80\x00\x01\x8f\x80\x80\x80\x00\x00\x43\x00\x00\x00\x00\x43\x00\x00\x00\x00\x38\x02\x00\x0b");

// store.wast:555
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x99\x80\x80\x80\x00\x01\x93\x80\x80\x80\x00\x00\x43\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x39\x03\x00\x0b");

// store.wast:557
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x41\x00\x43\x00\x00\x00\x00\x36\x02\x00\x0b");

// store.wast:558
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x41\x00\x43\x00\x00\x00\x00\x3a\x00\x00\x0b");

// store.wast:559
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x41\x00\x43\x00\x00\x00\x00\x3b\x01\x00\x0b");

// store.wast:560
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x41\x00\x43\x00\x00\x00\x00\x37\x03\x00\x0b");

// store.wast:561
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x96\x80\x80\x80\x00\x01\x90\x80\x80\x80\x00\x00\x41\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x00\x0b");

// store.wast:562
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x96\x80\x80\x80\x00\x01\x90\x80\x80\x80\x00\x00\x41\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x3d\x01\x00\x0b");

// store.wast:563
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x96\x80\x80\x80\x00\x01\x90\x80\x80\x80\x00\x00\x41\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x3e\x02\x00\x0b");

// store.wast:564
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x8f\x80\x80\x80\x00\x01\x89\x80\x80\x80\x00\x00\x41\x00\x41\x00\x38\x02\x00\x0b");

// store.wast:565
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x8f\x80\x80\x80\x00\x01\x89\x80\x80\x80\x00\x00\x41\x00\x42\x00\x39\x03\x00\x0b");
