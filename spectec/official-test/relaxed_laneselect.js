
'use strict';

if (typeof console === 'undefined') {
  var Console = function () {
      this.log = function(msg) { debug(msg); };
  };
  var console = new Console();
}

let hostrefs = {};
let hostsym = Symbol("hostref");
function hostref(s) {
  if (! (s in hostrefs)) hostrefs[s] = {[hostsym]: s};
  return hostrefs[s];
}
function eq_ref(x, y) {
  return x === y ? 1 : 0;
}

let spectest = {
  hostref: hostref,
  eq_ref: eq_ref,
  print: console.log.bind(console),
  print_i32: console.log.bind(console),
  print_i64: console.log.bind(console),
  print_i32_f32: console.log.bind(console),
  print_f64_f64: console.log.bind(console),
  print_f32: console.log.bind(console),
  print_f64: console.log.bind(console),
  global_i32: 666,
  global_i64: 666n,
  global_f32: 666.6,
  global_f64: 666.6,
  table: new WebAssembly.Table({initial: 10, maximum: 20, element: 'anyfunc'}),
  memory: new WebAssembly.Memory({initial: 1, maximum: 2})
};

let handler = {
  get(target, prop) {
    return (prop in target) ?  target[prop] : {};
  }
};
let registry = new Proxy({spectest}, handler);

function register(name, instance) {
  registry[name] = instance.exports;
}

function module(bytes, valid = true) {
  let buffer = new ArrayBuffer(bytes.length);
  let view = new Uint8Array(buffer);
  for (let i = 0; i < bytes.length; ++i) {
    view[i] = bytes.charCodeAt(i);
  }
  let validated;
  try {
    validated = WebAssembly.validate(buffer);
  } catch (e) {
    throw new Error("Wasm validate throws");
  }
  if (validated !== valid) {
    if (!validated) WebAssembly.compile(buffer).catch(e => console.log(e));
    throw new Error("Wasm validate failure" + (valid ? "" : " expected"));
  }
  return new WebAssembly.Module(buffer);
}

function instance(mod, imports = registry) {
  return new WebAssembly.Instance(mod, imports);
}

function call(instance, name, args) {
  return instance.exports[name](...args);
}

function get(instance, name) {
  let v = instance.exports[name];
  return (v instanceof WebAssembly.Global) ? v.value : v;
}

function exports(instance) {
  return {module: instance.exports, spectest: spectest};
}

function run(action) {
  action();
}

function assert_malformed(bytes) {
  try { module(bytes, false) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm decoding failure expected");
}

function assert_malformed_custom(bytes) {
  return;
}

function assert_invalid(bytes) {
  try { module(bytes, false) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm validation failure expected");
}

function assert_invalid_custom(bytes) {
  return;
}

function assert_unlinkable(mod) {
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof WebAssembly.LinkError) return;
  }
  throw new Error("Wasm linking failure expected");
}

function assert_uninstantiable(mod) {
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
    throw new Error("Wasm trap expected, but got: " + e);
  }
  throw new Error("Wasm trap expected");
}

function assert_uninstantiable_inlined(bytes) {
  let mod = module(bytes);
  assert_uninstantiable(mod);
}

function assert_trap(action) {
  try { action() } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
    throw new Error("Wasm trap expected, but got: " + e);
  }
  throw new Error("Wasm trap expected");
}

function assert_exception(action) {
  try { action() } catch (e) { return; }
  throw new Error("exception expected");
}

let StackOverflow;
try { (function f() { 1 + f() })() } catch (e) { StackOverflow = e.constructor }

function assert_exhaustion(action) {
  try { action() } catch (e) {
    if (e instanceof StackOverflow) return;
  }
  throw new Error("Wasm resource exhaustion expected");
}

function assert_return(action, ...expected) {
  let actual = action();
  if (actual === undefined) {
    actual = [];
  } else if (!Array.isArray(actual)) {
    actual = [actual];
  }
  if (actual.length !== expected.length) {
    throw new Error(expected.length + " value(s) expected, got " + actual.length);
  }
  for (let i = 0; i < actual.length; ++i) {
    switch (expected[i]) {
      case "nan:canonical":
      case "nan:arithmetic":
      case "nan:any":
        // Note that JS can't reliably distinguish different NaN values,
        // so there's no good way to test that it's a canonical NaN.
        if (!Number.isNaN(actual[i])) {
          throw new Error("Wasm NaN return value expected, got " + actual[i]);
        };
        return;
      case "ref.i31":
        if (typeof actual[i] !== "number" || (actual[i] & 0x7fffffff) !== actual[i]) {
          throw new Error("Wasm i31 return value expected, got " + actual[i]);
        };
        return;
      case "ref.any":
      case "ref.eq":
      case "ref.struct":
      case "ref.array":
        // For now, JS can't distinguish exported Wasm GC values,
        // so we only test for object.
        if (typeof actual[i] !== "object") {
          throw new Error("Wasm object return value expected, got " + actual[i]);
        };
        return;
      case "ref.func":
        if (typeof actual[i] !== "function") {
          throw new Error("Wasm function return value expected, got " + actual[i]);
        };
        return;
      case "ref.extern":
        if (actual[i] === null) {
          throw new Error("Wasm reference return value expected, got " + actual[i]);
        };
        return;
      case "ref.null":
        if (actual[i] !== null) {
          throw new Error("Wasm null return value expected, got " + actual[i]);
        };
        return;
      default:
        if (!Object.is(actual[i], expected[i])) {
          throw new Error("Wasm return value " + expected[i] + " expected, got " + actual[i]);
        };
    }
  }
}

// relaxed_laneselect.wast:3
let $$1 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x01\x60\x03\x7b\x7b\x7b\x01\x7b\x03\x89\x80\x80\x80\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x07\xe9\x81\x80\x80\x00\x08\x18\x69\x38\x78\x31\x36\x2e\x72\x65\x6c\x61\x78\x65\x64\x5f\x6c\x61\x6e\x65\x73\x65\x6c\x65\x63\x74\x00\x00\x18\x69\x31\x36\x78\x38\x2e\x72\x65\x6c\x61\x78\x65\x64\x5f\x6c\x61\x6e\x65\x73\x65\x6c\x65\x63\x74\x00\x01\x18\x69\x33\x32\x78\x34\x2e\x72\x65\x6c\x61\x78\x65\x64\x5f\x6c\x61\x6e\x65\x73\x65\x6c\x65\x63\x74\x00\x02\x18\x69\x36\x34\x78\x32\x2e\x72\x65\x6c\x61\x78\x65\x64\x5f\x6c\x61\x6e\x65\x73\x65\x6c\x65\x63\x74\x00\x03\x1c\x69\x38\x78\x31\x36\x2e\x72\x65\x6c\x61\x78\x65\x64\x5f\x6c\x61\x6e\x65\x73\x65\x6c\x65\x63\x74\x5f\x63\x6d\x70\x00\x04\x1c\x69\x31\x36\x78\x38\x2e\x72\x65\x6c\x61\x78\x65\x64\x5f\x6c\x61\x6e\x65\x73\x65\x6c\x65\x63\x74\x5f\x63\x6d\x70\x00\x05\x1c\x69\x33\x32\x78\x34\x2e\x72\x65\x6c\x61\x78\x65\x64\x5f\x6c\x61\x6e\x65\x73\x65\x6c\x65\x63\x74\x5f\x63\x6d\x70\x00\x06\x1c\x69\x36\x34\x78\x32\x2e\x72\x65\x6c\x61\x78\x65\x64\x5f\x6c\x61\x6e\x65\x73\x65\x6c\x65\x63\x74\x5f\x63\x6d\x70\x00\x07\x0a\xae\x81\x80\x80\x00\x08\x8b\x80\x80\x80\x00\x00\x20\x00\x20\x01\x20\x02\xfd\x89\x02\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\x20\x01\x20\x02\xfd\x8a\x02\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\x20\x01\x20\x02\xfd\x8b\x02\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\x20\x01\x20\x02\xfd\x8c\x02\x0b\x96\x80\x80\x80\x00\x00\x20\x00\x20\x01\x20\x02\xfd\x89\x02\x20\x00\x20\x01\x20\x02\xfd\x89\x02\xfd\x23\x0b\x96\x80\x80\x80\x00\x00\x20\x00\x20\x01\x20\x02\xfd\x8a\x02\x20\x00\x20\x01\x20\x02\xfd\x8a\x02\xfd\x2d\x0b\x96\x80\x80\x80\x00\x00\x20\x00\x20\x01\x20\x02\xfd\x8b\x02\x20\x00\x20\x01\x20\x02\xfd\x8b\x02\xfd\x37\x0b\x97\x80\x80\x80\x00\x00\x20\x00\x20\x01\x20\x02\xfd\x8c\x02\x20\x00\x20\x01\x20\x02\xfd\x8c\x02\xfd\xd6\x01\x0b");

// relaxed_laneselect.wast:3
let $1 = instance($$1);

// relaxed_laneselect.wast:27
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x96\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x03\x7b\x7b\x7b\x01\x7b\x02\xc8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x18\x69\x38\x78\x31\x36\x2e\x72\x65\x6c\x61\x78\x65\x64\x5f\x6c\x61\x6e\x65\x73\x65\x6c\x65\x63\x74\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xb6\x81\x80\x80\x00\x01\xb0\x81\x80\x80\x00\x01\x01\x7b\x02\x40\xfd\x0c\x00\x01\x12\x12\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\xfd\x0c\x10\x11\x34\x34\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\xfd\x0c\xff\x00\xf0\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x21\x00\x02\x40\x02\x40\x20\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x00\x11\x14\x32\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\xfd\x23\xfd\x63\x45\x0d\x00\x0c\x01\x0b\x02\x40\x20\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x00\x11\x12\x34\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\xfd\x23\xfd\x63\x45\x0d\x00\x0c\x01\x0b\x0c\x01\x0b\x0f\x0b\x00\x0b"), exports($1)),  "run", []));  // assert_return(() => call($1, "i8x16.relaxed_laneselect", [v128("303_169_792 117_835_012 185_207_048 252_579_084"), v128("875_827_472 387_323_156 454_695_192 522_067_228"), v128("267_387_135 0 0 0")]), [v128("0 17 20 50 20 21 22 23 24 25 26 27 28 29 30 31"), v128("0 17 18 52 20 21 22 23 24 25 26 27 28 29 30 31")])

// relaxed_laneselect.wast:34
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x96\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x03\x7b\x7b\x7b\x01\x7b\x02\xc8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x18\x69\x31\x36\x78\x38\x2e\x72\x65\x6c\x61\x78\x65\x64\x5f\x6c\x61\x6e\x65\x73\x65\x6c\x65\x63\x74\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xb6\x81\x80\x80\x00\x01\xb0\x81\x80\x80\x00\x01\x01\x7b\x02\x40\xfd\x0c\x00\x00\x01\x00\x34\x12\x34\x12\x04\x00\x05\x00\x06\x00\x07\x00\xfd\x0c\x08\x00\x09\x00\x78\x56\x78\x56\x0c\x00\x0d\x00\x0e\x00\x0f\x00\xfd\x0c\xff\xff\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x21\x00\x02\x40\x02\x40\x20\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x00\x00\x09\x00\x78\x12\x34\x56\x0c\x00\x0d\x00\x0e\x00\x0f\x00\xfd\x23\xfd\x63\x45\x0d\x00\x0c\x01\x0b\x02\x40\x20\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x00\x00\x09\x00\x34\x12\x78\x56\x0c\x00\x0d\x00\x0e\x00\x0f\x00\xfd\x23\xfd\x63\x45\x0d\x00\x0c\x01\x0b\x0c\x01\x0b\x0f\x0b\x00\x0b"), exports($1)),  "run", []));  // assert_return(() => call($1, "i16x8.relaxed_laneselect", [v128("65_536 305_402_420 327_684 458_758"), v128("589_832 1_450_727_032 851_980 983_054"), v128("65_535 16_776_960 0 0")]), [v128("0 9 4_728 22_068 12 13 14 15"), v128("0 9 4_660 22_136 12 13 14 15")])

// relaxed_laneselect.wast:42
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x96\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x03\x7b\x7b\x7b\x01\x7b\x02\xc8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x18\x69\x31\x36\x78\x38\x2e\x72\x65\x6c\x61\x78\x65\x64\x5f\x6c\x61\x6e\x65\x73\x65\x6c\x65\x63\x74\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xea\x81\x80\x80\x00\x01\xe4\x81\x80\x80\x00\x01\x01\x7b\x02\x40\xfd\x0c\x00\x00\x01\x00\x34\x12\x34\x12\x04\x00\x05\x00\x06\x00\x07\x00\xfd\x0c\x08\x00\x09\x00\x78\x56\x78\x56\x0c\x00\x0d\x00\x0e\x00\x0f\x00\xfd\x0c\xff\xff\x00\x00\x00\xff\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x21\x00\x02\x40\x02\x40\x20\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x00\x00\x09\x00\x78\x12\x78\x56\x0c\x00\x0d\x00\x0e\x00\x0f\x00\xfd\x23\xfd\x63\x45\x0d\x00\x0c\x01\x0b\x02\x40\x20\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x00\x00\x09\x00\x34\x12\x78\x56\x0c\x00\x0d\x00\x0e\x00\x0f\x00\xfd\x23\xfd\x63\x45\x0d\x00\x0c\x01\x0b\x02\x40\x20\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x00\x00\x09\x00\x78\x12\x34\x56\x0c\x00\x0d\x00\x0e\x00\x0f\x00\xfd\x23\xfd\x63\x45\x0d\x00\x0c\x01\x0b\x0c\x01\x0b\x0f\x0b\x00\x0b"), exports($1)),  "run", []));  // assert_return(() => call($1, "i16x8.relaxed_laneselect", [v128("65_536 305_402_420 327_684 458_758"), v128("589_832 1_450_727_032 851_980 983_054"), v128("65_535 8_453_888 0 0")]), [v128("0 9 4_728 22_136 12 13 14 15"), v128("0 9 4_660 22_136 12 13 14 15"), v128("0 9 4_728 22_068 12 13 14 15")])

// relaxed_laneselect.wast:51
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x96\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x03\x7b\x7b\x7b\x01\x7b\x02\xc8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x18\x69\x33\x32\x78\x34\x2e\x72\x65\x6c\x61\x78\x65\x64\x5f\x6c\x61\x6e\x65\x73\x65\x6c\x65\x63\x74\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xb6\x81\x80\x80\x00\x01\xb0\x81\x80\x80\x00\x01\x01\x7b\x02\x40\xfd\x0c\x00\x00\x00\x00\x01\x00\x00\x00\x34\x12\x34\x12\x34\x12\x34\x12\xfd\x0c\x04\x00\x00\x00\x05\x00\x00\x00\x78\x56\x78\x56\x78\x56\x78\x56\xfd\x0c\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x10\x00\x21\x00\x02\x40\x02\x40\x20\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x00\x00\x00\x00\x05\x00\x00\x00\x78\x56\x34\x12\x34\x12\x78\x56\xfd\x23\xfd\x63\x45\x0d\x00\x0c\x01\x0b\x02\x40\x20\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x00\x00\x00\x00\x05\x00\x00\x00\x34\x12\x34\x12\x78\x56\x78\x56\xfd\x23\xfd\x63\x45\x0d\x00\x0c\x01\x0b\x0c\x01\x0b\x0f\x0b\x00\x0b"), exports($1)),  "run", []));  // assert_return(() => call($1, "i32x4.relaxed_laneselect", [v128("0 1 305_402_420 305_402_420"), v128("4 5 1_450_727_032 1_450_727_032"), v128("-1 0 -65_536 65_535")]), [v128("0 5 305_419_896 1_450_709_556"), v128("0 5 305_402_420 1_450_727_032")])

// relaxed_laneselect.wast:58
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x96\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x03\x7b\x7b\x7b\x01\x7b\x02\xc8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x18\x69\x36\x34\x78\x32\x2e\x72\x65\x6c\x61\x78\x65\x64\x5f\x6c\x61\x6e\x65\x73\x65\x6c\x65\x63\x74\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xb6\x81\x80\x80\x00\x01\xb0\x81\x80\x80\x00\x01\x01\x7b\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x21\x00\x02\x40\x02\x40\x20\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\xfd\x23\xfd\x63\x45\x0d\x00\x0c\x01\x0b\x02\x40\x20\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\xfd\x23\xfd\x63\x45\x0d\x00\x0c\x01\x0b\x0c\x01\x0b\x0f\x0b\x00\x0b"), exports($1)),  "run", []));  // assert_return(() => call($1, "i64x2.relaxed_laneselect", [v128("0 0 1 0"), v128("2 0 3 0"), v128("-1 -1 0 0")]), [v128("0n 3n"), v128("0n 3n")])

// relaxed_laneselect.wast:65
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x96\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x03\x7b\x7b\x7b\x01\x7b\x02\xc8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x18\x69\x36\x34\x78\x32\x2e\x72\x65\x6c\x61\x78\x65\x64\x5f\x6c\x61\x6e\x65\x73\x65\x6c\x65\x63\x74\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xb6\x81\x80\x80\x00\x01\xb0\x81\x80\x80\x00\x01\x01\x7b\x02\x40\xfd\x0c\x34\x12\x34\x12\x34\x12\x34\x12\x34\x12\x34\x12\x34\x12\x34\x12\xfd\x0c\x78\x56\x78\x56\x78\x56\x78\x56\x78\x56\x78\x56\x78\x56\x78\x56\xfd\x0c\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x10\x00\x21\x00\x02\x40\x02\x40\x20\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x78\x56\x78\x56\x34\x12\x34\x12\x34\x12\x34\x12\x78\x56\x78\x56\xfd\x23\xfd\x63\x45\x0d\x00\x0c\x01\x0b\x02\x40\x20\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x34\x12\x34\x12\x34\x12\x34\x12\x78\x56\x78\x56\x78\x56\x78\x56\xfd\x23\xfd\x63\x45\x0d\x00\x0c\x01\x0b\x0c\x01\x0b\x0f\x0b\x00\x0b"), exports($1)),  "run", []));  // assert_return(() => call($1, "i64x2.relaxed_laneselect", [v128("305_402_420 305_402_420 305_402_420 305_402_420"), v128("1_450_727_032 1_450_727_032 1_450_727_032 1_450_727_032"), v128("0 -1 -1 0")]), [v128("1_311_693_407_469_983_352n 6_230_825_158_168_547_892n"), v128("1_311_693_406_324_658_740n 6_230_825_159_313_872_504n")])

// relaxed_laneselect.wast:74
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x96\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x03\x7b\x7b\x7b\x01\x7b\x02\xcc\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x1c\x69\x38\x78\x31\x36\x2e\x72\x65\x6c\x61\x78\x65\x64\x5f\x6c\x61\x6e\x65\x73\x65\x6c\x65\x63\x74\x5f\x63\x6d\x70\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xf2\x80\x80\x80\x00\x01\xec\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x01\x12\x12\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\xfd\x0c\x10\x11\x34\x34\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\xfd\x0c\xff\x00\xf0\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x23\xfd\x63\x45\x0d\x00\x0f\x0b\x00\x0b"), exports($1)),  "run", []));  // assert_return(() => call($1, "i8x16.relaxed_laneselect_cmp", [v128("303_169_792 117_835_012 185_207_048 252_579_084"), v128("875_827_472 387_323_156 454_695_192 522_067_228"), v128("267_387_135 0 0 0")]), v128("-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1"))

// relaxed_laneselect.wast:80
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x96\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x03\x7b\x7b\x7b\x01\x7b\x02\xcc\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x1c\x69\x31\x36\x78\x38\x2e\x72\x65\x6c\x61\x78\x65\x64\x5f\x6c\x61\x6e\x65\x73\x65\x6c\x65\x63\x74\x5f\x63\x6d\x70\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xf2\x80\x80\x80\x00\x01\xec\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x01\x00\x34\x12\x34\x12\x04\x00\x05\x00\x06\x00\x07\x00\xfd\x0c\x08\x00\x09\x00\x78\x56\x78\x56\x0c\x00\x0d\x00\x0e\x00\x0f\x00\xfd\x0c\xff\xff\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x23\xfd\x63\x45\x0d\x00\x0f\x0b\x00\x0b"), exports($1)),  "run", []));  // assert_return(() => call($1, "i16x8.relaxed_laneselect_cmp", [v128("65_536 305_402_420 327_684 458_758"), v128("589_832 1_450_727_032 851_980 983_054"), v128("65_535 16_776_960 0 0")]), v128("-1 -1 -1 -1 -1 -1 -1 -1"))

// relaxed_laneselect.wast:86
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x96\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x03\x7b\x7b\x7b\x01\x7b\x02\xcc\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x1c\x69\x33\x32\x78\x34\x2e\x72\x65\x6c\x61\x78\x65\x64\x5f\x6c\x61\x6e\x65\x73\x65\x6c\x65\x63\x74\x5f\x63\x6d\x70\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xf2\x80\x80\x80\x00\x01\xec\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x01\x00\x00\x00\x34\x12\x34\x12\x34\x12\x34\x12\xfd\x0c\x04\x00\x00\x00\x05\x00\x00\x00\x78\x56\x78\x56\x78\x56\x78\x56\xfd\x0c\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x10\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x23\xfd\x63\x45\x0d\x00\x0f\x0b\x00\x0b"), exports($1)),  "run", []));  // assert_return(() => call($1, "i32x4.relaxed_laneselect_cmp", [v128("0 1 305_402_420 305_402_420"), v128("4 5 1_450_727_032 1_450_727_032"), v128("-1 0 -65_536 65_535")]), v128("-1 -1 -1 -1"))

// relaxed_laneselect.wast:92
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x96\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x03\x7b\x7b\x7b\x01\x7b\x02\xcc\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x1c\x69\x36\x34\x78\x32\x2e\x72\x65\x6c\x61\x78\x65\x64\x5f\x6c\x61\x6e\x65\x73\x65\x6c\x65\x63\x74\x5f\x63\x6d\x70\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xf2\x80\x80\x80\x00\x01\xec\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x23\xfd\x63\x45\x0d\x00\x0f\x0b\x00\x0b"), exports($1)),  "run", []));  // assert_return(() => call($1, "i64x2.relaxed_laneselect_cmp", [v128("0 0 1 0"), v128("2 0 3 0"), v128("-1 -1 0 0")]), v128("-1n -1n"))

// relaxed_laneselect.wast:98
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x96\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x03\x7b\x7b\x7b\x01\x7b\x02\xcc\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x1c\x69\x36\x34\x78\x32\x2e\x72\x65\x6c\x61\x78\x65\x64\x5f\x6c\x61\x6e\x65\x73\x65\x6c\x65\x63\x74\x5f\x63\x6d\x70\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xf2\x80\x80\x80\x00\x01\xec\x80\x80\x80\x00\x00\x02\x40\xfd\x0c\x34\x12\x34\x12\x34\x12\x34\x12\x34\x12\x34\x12\x34\x12\x34\x12\xfd\x0c\x78\x56\x78\x56\x78\x56\x78\x56\x78\x56\x78\x56\x78\x56\x78\x56\xfd\x0c\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x10\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x23\xfd\x63\x45\x0d\x00\x0f\x0b\x00\x0b"), exports($1)),  "run", []));  // assert_return(() => call($1, "i64x2.relaxed_laneselect_cmp", [v128("305_402_420 305_402_420 305_402_420 305_402_420"), v128("1_450_727_032 1_450_727_032 1_450_727_032 1_450_727_032"), v128("0 -1 -1 0")]), v128("-1n -1n"))
