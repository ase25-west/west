
'use strict';

if (typeof console === 'undefined') {
  var Console = function () {
      this.log = function(msg) { debug(msg); };
  };
  var console = new Console();
}

let hostrefs = {};
let hostsym = Symbol("hostref");
function hostref(s) {
  if (! (s in hostrefs)) hostrefs[s] = {[hostsym]: s};
  return hostrefs[s];
}
function eq_ref(x, y) {
  return x === y ? 1 : 0;
}

let spectest = {
  hostref: hostref,
  eq_ref: eq_ref,
  print: console.log.bind(console),
  print_i32: console.log.bind(console),
  print_i64: console.log.bind(console),
  print_i32_f32: console.log.bind(console),
  print_f64_f64: console.log.bind(console),
  print_f32: console.log.bind(console),
  print_f64: console.log.bind(console),
  global_i32: 666,
  global_i64: 666n,
  global_f32: 666.6,
  global_f64: 666.6,
  table: new WebAssembly.Table({initial: 10, maximum: 20, element: 'anyfunc'}),
  memory: new WebAssembly.Memory({initial: 1, maximum: 2})
};

let handler = {
  get(target, prop) {
    return (prop in target) ?  target[prop] : {};
  }
};
let registry = new Proxy({spectest}, handler);

function register(name, instance) {
  registry[name] = instance.exports;
}

function module(bytes, valid = true) {
  let buffer = new ArrayBuffer(bytes.length);
  let view = new Uint8Array(buffer);
  for (let i = 0; i < bytes.length; ++i) {
    view[i] = bytes.charCodeAt(i);
  }
  let validated;
  try {
    validated = WebAssembly.validate(buffer);
  } catch (e) {
    throw new Error("Wasm validate throws");
  }
  if (validated !== valid) {
    if (!validated) WebAssembly.compile(buffer).catch(e => console.log(e));
    throw new Error("Wasm validate failure" + (valid ? "" : " expected"));
  }
  return new WebAssembly.Module(buffer);
}

function instance(mod, imports = registry) {
  return new WebAssembly.Instance(mod, imports);
}

function call(instance, name, args) {
  return instance.exports[name](...args);
}

function get(instance, name) {
  let v = instance.exports[name];
  return (v instanceof WebAssembly.Global) ? v.value : v;
}

function exports(instance) {
  return {module: instance.exports, spectest: spectest};
}

function run(action) {
  action();
}

function assert_malformed(bytes) {
  try { module(bytes, false) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm decoding failure expected");
}

function assert_malformed_custom(bytes) {
  return;
}

function assert_invalid(bytes) {
  try { module(bytes, false) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm validation failure expected");
}

function assert_invalid_custom(bytes) {
  return;
}

function assert_unlinkable(mod) {
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof WebAssembly.LinkError) return;
  }
  throw new Error("Wasm linking failure expected");
}

function assert_uninstantiable(mod) {
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
    throw new Error("Wasm trap expected, but got: " + e);
  }
  throw new Error("Wasm trap expected");
}

function assert_uninstantiable_inlined(bytes) {
  let mod = module(bytes);
  assert_uninstantiable(mod);
}

function assert_trap(action) {
  try { action() } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
    throw new Error("Wasm trap expected, but got: " + e);
  }
  throw new Error("Wasm trap expected");
}

function assert_exception(action) {
  try { action() } catch (e) { return; }
  throw new Error("exception expected");
}

let StackOverflow;
try { (function f() { 1 + f() })() } catch (e) { StackOverflow = e.constructor }

function assert_exhaustion(action) {
  try { action() } catch (e) {
    if (e instanceof StackOverflow) return;
  }
  throw new Error("Wasm resource exhaustion expected");
}

function assert_return(action, ...expected) {
  let actual = action();
  if (actual === undefined) {
    actual = [];
  } else if (!Array.isArray(actual)) {
    actual = [actual];
  }
  if (actual.length !== expected.length) {
    throw new Error(expected.length + " value(s) expected, got " + actual.length);
  }
  for (let i = 0; i < actual.length; ++i) {
    switch (expected[i]) {
      case "nan:canonical":
      case "nan:arithmetic":
      case "nan:any":
        // Note that JS can't reliably distinguish different NaN values,
        // so there's no good way to test that it's a canonical NaN.
        if (!Number.isNaN(actual[i])) {
          throw new Error("Wasm NaN return value expected, got " + actual[i]);
        };
        return;
      case "ref.i31":
        if (typeof actual[i] !== "number" || (actual[i] & 0x7fffffff) !== actual[i]) {
          throw new Error("Wasm i31 return value expected, got " + actual[i]);
        };
        return;
      case "ref.any":
      case "ref.eq":
      case "ref.struct":
      case "ref.array":
        // For now, JS can't distinguish exported Wasm GC values,
        // so we only test for object.
        if (typeof actual[i] !== "object") {
          throw new Error("Wasm object return value expected, got " + actual[i]);
        };
        return;
      case "ref.func":
        if (typeof actual[i] !== "function") {
          throw new Error("Wasm function return value expected, got " + actual[i]);
        };
        return;
      case "ref.extern":
        if (actual[i] === null) {
          throw new Error("Wasm reference return value expected, got " + actual[i]);
        };
        return;
      case "ref.null":
        if (actual[i] !== null) {
          throw new Error("Wasm null return value expected, got " + actual[i]);
        };
        return;
      default:
        if (!Object.is(actual[i], expected[i])) {
          throw new Error("Wasm return value " + expected[i] + " expected, got " + actual[i]);
        };
    }
  }
}

// table_init.wast:6
let $$1 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x86\x80\x80\x80\x00\x05\x00\x00\x00\x00\x00\x07\x9f\x80\x80\x80\x00\x05\x03\x65\x66\x30\x00\x00\x03\x65\x66\x31\x00\x01\x03\x65\x66\x32\x00\x02\x03\x65\x66\x33\x00\x03\x03\x65\x66\x34\x00\x04\x0a\xae\x80\x80\x80\x00\x05\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b");

// table_init.wast:6
let $1 = instance($$1);

// table_init.wast:13
register("a", $1)

// table_init.wast:15
let $$2 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x00\x00\x60\x01\x7f\x01\x7f\x02\xa9\x80\x80\x80\x00\x05\x01\x61\x03\x65\x66\x30\x00\x00\x01\x61\x03\x65\x66\x31\x00\x00\x01\x61\x03\x65\x66\x32\x00\x00\x01\x61\x03\x65\x66\x33\x00\x00\x01\x61\x03\x65\x66\x34\x00\x00\x03\x88\x80\x80\x80\x00\x07\x00\x00\x00\x00\x00\x01\x02\x04\x8d\x80\x80\x80\x00\x03\x70\x01\x1e\x1e\x70\x01\x1e\x1e\x70\x05\x1e\x1e\x07\x90\x80\x80\x80\x00\x02\x04\x74\x65\x73\x74\x00\x0a\x05\x63\x68\x65\x63\x6b\x00\x0b\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xcb\x80\x80\x80\x00\x07\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x07\x41\x00\x41\x04\xfc\x0c\x01\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x00\x0b");

// table_init.wast:15
let $2 = instance($$2);

// table_init.wast:42
run(() => call($2, "test", []));

// table_init.wast:43
assert_trap(() => call($2, "check", [0]));

// table_init.wast:44
assert_trap(() => call($2, "check", [1]));

// table_init.wast:45
assert_return(() => call($2, "check", [2]), 3);

// table_init.wast:46
assert_return(() => call($2, "check", [3]), 1);

// table_init.wast:47
assert_return(() => call($2, "check", [4]), 4);

// table_init.wast:48
assert_return(() => call($2, "check", [5]), 1);

// table_init.wast:49
assert_trap(() => call($2, "check", [6]));

// table_init.wast:50
assert_return(() => call($2, "check", [7]), 2);

// table_init.wast:51
assert_return(() => call($2, "check", [8]), 7);

// table_init.wast:52
assert_return(() => call($2, "check", [9]), 1);

// table_init.wast:53
assert_return(() => call($2, "check", [10]), 8);

// table_init.wast:54
assert_trap(() => call($2, "check", [11]));

// table_init.wast:55
assert_return(() => call($2, "check", [12]), 7);

// table_init.wast:56
assert_return(() => call($2, "check", [13]), 5);

// table_init.wast:57
assert_return(() => call($2, "check", [14]), 2);

// table_init.wast:58
assert_return(() => call($2, "check", [15]), 3);

// table_init.wast:59
assert_return(() => call($2, "check", [16]), 6);

// table_init.wast:60
assert_trap(() => call($2, "check", [17]));

// table_init.wast:61
assert_trap(() => call($2, "check", [18]));

// table_init.wast:62
assert_trap(() => call($2, "check", [19]));

// table_init.wast:63
assert_trap(() => call($2, "check", [20]));

// table_init.wast:64
assert_trap(() => call($2, "check", [21]));

// table_init.wast:65
assert_trap(() => call($2, "check", [22]));

// table_init.wast:66
assert_trap(() => call($2, "check", [23]));

// table_init.wast:67
assert_trap(() => call($2, "check", [24]));

// table_init.wast:68
assert_trap(() => call($2, "check", [25]));

// table_init.wast:69
assert_trap(() => call($2, "check", [26]));

// table_init.wast:70
assert_trap(() => call($2, "check", [27]));

// table_init.wast:71
assert_trap(() => call($2, "check", [28]));

// table_init.wast:72
assert_trap(() => call($2, "check", [29]));

// table_init.wast:74
let $$3 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x00\x00\x60\x01\x7f\x01\x7f\x02\xa9\x80\x80\x80\x00\x05\x01\x61\x03\x65\x66\x30\x00\x00\x01\x61\x03\x65\x66\x31\x00\x00\x01\x61\x03\x65\x66\x32\x00\x00\x01\x61\x03\x65\x66\x33\x00\x00\x01\x61\x03\x65\x66\x34\x00\x00\x03\x88\x80\x80\x80\x00\x07\x00\x00\x00\x00\x00\x01\x02\x04\x8d\x80\x80\x80\x00\x03\x70\x01\x1e\x1e\x70\x01\x1e\x1e\x70\x05\x1e\x1e\x07\x90\x80\x80\x80\x00\x02\x04\x74\x65\x73\x74\x00\x0a\x05\x63\x68\x65\x63\x6b\x00\x0b\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xcb\x80\x80\x80\x00\x07\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x0f\x41\x01\x41\x03\xfc\x0c\x03\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x00\x0b");

// table_init.wast:74
let $3 = instance($$3);

// table_init.wast:101
run(() => call($3, "test", []));

// table_init.wast:102
assert_trap(() => call($3, "check", [0]));

// table_init.wast:103
assert_trap(() => call($3, "check", [1]));

// table_init.wast:104
assert_return(() => call($3, "check", [2]), 3);

// table_init.wast:105
assert_return(() => call($3, "check", [3]), 1);

// table_init.wast:106
assert_return(() => call($3, "check", [4]), 4);

// table_init.wast:107
assert_return(() => call($3, "check", [5]), 1);

// table_init.wast:108
assert_trap(() => call($3, "check", [6]));

// table_init.wast:109
assert_trap(() => call($3, "check", [7]));

// table_init.wast:110
assert_trap(() => call($3, "check", [8]));

// table_init.wast:111
assert_trap(() => call($3, "check", [9]));

// table_init.wast:112
assert_trap(() => call($3, "check", [10]));

// table_init.wast:113
assert_trap(() => call($3, "check", [11]));

// table_init.wast:114
assert_return(() => call($3, "check", [12]), 7);

// table_init.wast:115
assert_return(() => call($3, "check", [13]), 5);

// table_init.wast:116
assert_return(() => call($3, "check", [14]), 2);

// table_init.wast:117
assert_return(() => call($3, "check", [15]), 9);

// table_init.wast:118
assert_return(() => call($3, "check", [16]), 2);

// table_init.wast:119
assert_return(() => call($3, "check", [17]), 7);

// table_init.wast:120
assert_trap(() => call($3, "check", [18]));

// table_init.wast:121
assert_trap(() => call($3, "check", [19]));

// table_init.wast:122
assert_trap(() => call($3, "check", [20]));

// table_init.wast:123
assert_trap(() => call($3, "check", [21]));

// table_init.wast:124
assert_trap(() => call($3, "check", [22]));

// table_init.wast:125
assert_trap(() => call($3, "check", [23]));

// table_init.wast:126
assert_trap(() => call($3, "check", [24]));

// table_init.wast:127
assert_trap(() => call($3, "check", [25]));

// table_init.wast:128
assert_trap(() => call($3, "check", [26]));

// table_init.wast:129
assert_trap(() => call($3, "check", [27]));

// table_init.wast:130
assert_trap(() => call($3, "check", [28]));

// table_init.wast:131
assert_trap(() => call($3, "check", [29]));

// table_init.wast:133
let $$4 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x00\x00\x60\x01\x7f\x01\x7f\x02\xa9\x80\x80\x80\x00\x05\x01\x61\x03\x65\x66\x30\x00\x00\x01\x61\x03\x65\x66\x31\x00\x00\x01\x61\x03\x65\x66\x32\x00\x00\x01\x61\x03\x65\x66\x33\x00\x00\x01\x61\x03\x65\x66\x34\x00\x00\x03\x88\x80\x80\x80\x00\x07\x00\x00\x00\x00\x00\x01\x02\x04\x8d\x80\x80\x80\x00\x03\x70\x01\x1e\x1e\x70\x01\x1e\x1e\x70\x05\x1e\x1e\x07\x90\x80\x80\x80\x00\x02\x04\x74\x65\x73\x74\x00\x0a\x05\x63\x68\x65\x63\x6b\x00\x0b\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\x8d\x81\x80\x80\x00\x07\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\xce\x80\x80\x80\x00\x00\x41\x07\x41\x00\x41\x04\xfc\x0c\x01\x00\xfc\x0d\x01\x41\x0f\x41\x01\x41\x03\xfc\x0c\x03\x00\xfc\x0d\x03\x41\x14\x41\x0f\x41\x05\xfc\x0e\x00\x00\x41\x15\x41\x1d\x41\x01\xfc\x0e\x00\x00\x41\x18\x41\x0a\x41\x01\xfc\x0e\x00\x00\x41\x0d\x41\x0b\x41\x04\xfc\x0e\x00\x00\x41\x13\x41\x14\x41\x05\xfc\x0e\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x00\x0b");

// table_init.wast:133
let $4 = instance($$4);

// table_init.wast:168
run(() => call($4, "test", []));

// table_init.wast:169
assert_trap(() => call($4, "check", [0]));

// table_init.wast:170
assert_trap(() => call($4, "check", [1]));

// table_init.wast:171
assert_return(() => call($4, "check", [2]), 3);

// table_init.wast:172
assert_return(() => call($4, "check", [3]), 1);

// table_init.wast:173
assert_return(() => call($4, "check", [4]), 4);

// table_init.wast:174
assert_return(() => call($4, "check", [5]), 1);

// table_init.wast:175
assert_trap(() => call($4, "check", [6]));

// table_init.wast:176
assert_return(() => call($4, "check", [7]), 2);

// table_init.wast:177
assert_return(() => call($4, "check", [8]), 7);

// table_init.wast:178
assert_return(() => call($4, "check", [9]), 1);

// table_init.wast:179
assert_return(() => call($4, "check", [10]), 8);

// table_init.wast:180
assert_trap(() => call($4, "check", [11]));

// table_init.wast:181
assert_return(() => call($4, "check", [12]), 7);

// table_init.wast:182
assert_trap(() => call($4, "check", [13]));

// table_init.wast:183
assert_return(() => call($4, "check", [14]), 7);

// table_init.wast:184
assert_return(() => call($4, "check", [15]), 5);

// table_init.wast:185
assert_return(() => call($4, "check", [16]), 2);

// table_init.wast:186
assert_return(() => call($4, "check", [17]), 7);

// table_init.wast:187
assert_trap(() => call($4, "check", [18]));

// table_init.wast:188
assert_return(() => call($4, "check", [19]), 9);

// table_init.wast:189
assert_trap(() => call($4, "check", [20]));

// table_init.wast:190
assert_return(() => call($4, "check", [21]), 7);

// table_init.wast:191
assert_trap(() => call($4, "check", [22]));

// table_init.wast:192
assert_return(() => call($4, "check", [23]), 8);

// table_init.wast:193
assert_return(() => call($4, "check", [24]), 8);

// table_init.wast:194
assert_trap(() => call($4, "check", [25]));

// table_init.wast:195
assert_trap(() => call($4, "check", [26]));

// table_init.wast:196
assert_trap(() => call($4, "check", [27]));

// table_init.wast:197
assert_trap(() => call($4, "check", [28]));

// table_init.wast:198
assert_trap(() => call($4, "check", [29]));

// table_init.wast:200
let $$5 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x00\x00\x60\x01\x7f\x01\x7f\x02\xa9\x80\x80\x80\x00\x05\x01\x61\x03\x65\x66\x30\x00\x00\x01\x61\x03\x65\x66\x31\x00\x00\x01\x61\x03\x65\x66\x32\x00\x00\x01\x61\x03\x65\x66\x33\x00\x00\x01\x61\x03\x65\x66\x34\x00\x00\x03\x88\x80\x80\x80\x00\x07\x00\x00\x00\x00\x00\x01\x02\x04\x8d\x80\x80\x80\x00\x03\x70\x01\x1e\x1e\x70\x01\x1e\x1e\x70\x05\x1e\x1e\x07\x90\x80\x80\x80\x00\x02\x04\x74\x65\x73\x74\x00\x0a\x05\x63\x68\x65\x63\x6b\x00\x0b\x09\xb9\x80\x80\x80\x00\x04\x02\x01\x41\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x01\x41\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xcb\x80\x80\x80\x00\x07\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x07\x41\x00\x41\x04\xfc\x0c\x01\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x01\x0b");

// table_init.wast:200
let $5 = instance($$5);

// table_init.wast:227
run(() => call($5, "test", []));

// table_init.wast:228
assert_trap(() => call($5, "check", [0]));

// table_init.wast:229
assert_trap(() => call($5, "check", [1]));

// table_init.wast:230
assert_return(() => call($5, "check", [2]), 3);

// table_init.wast:231
assert_return(() => call($5, "check", [3]), 1);

// table_init.wast:232
assert_return(() => call($5, "check", [4]), 4);

// table_init.wast:233
assert_return(() => call($5, "check", [5]), 1);

// table_init.wast:234
assert_trap(() => call($5, "check", [6]));

// table_init.wast:235
assert_return(() => call($5, "check", [7]), 2);

// table_init.wast:236
assert_return(() => call($5, "check", [8]), 7);

// table_init.wast:237
assert_return(() => call($5, "check", [9]), 1);

// table_init.wast:238
assert_return(() => call($5, "check", [10]), 8);

// table_init.wast:239
assert_trap(() => call($5, "check", [11]));

// table_init.wast:240
assert_return(() => call($5, "check", [12]), 7);

// table_init.wast:241
assert_return(() => call($5, "check", [13]), 5);

// table_init.wast:242
assert_return(() => call($5, "check", [14]), 2);

// table_init.wast:243
assert_return(() => call($5, "check", [15]), 3);

// table_init.wast:244
assert_return(() => call($5, "check", [16]), 6);

// table_init.wast:245
assert_trap(() => call($5, "check", [17]));

// table_init.wast:246
assert_trap(() => call($5, "check", [18]));

// table_init.wast:247
assert_trap(() => call($5, "check", [19]));

// table_init.wast:248
assert_trap(() => call($5, "check", [20]));

// table_init.wast:249
assert_trap(() => call($5, "check", [21]));

// table_init.wast:250
assert_trap(() => call($5, "check", [22]));

// table_init.wast:251
assert_trap(() => call($5, "check", [23]));

// table_init.wast:252
assert_trap(() => call($5, "check", [24]));

// table_init.wast:253
assert_trap(() => call($5, "check", [25]));

// table_init.wast:254
assert_trap(() => call($5, "check", [26]));

// table_init.wast:255
assert_trap(() => call($5, "check", [27]));

// table_init.wast:256
assert_trap(() => call($5, "check", [28]));

// table_init.wast:257
assert_trap(() => call($5, "check", [29]));

// table_init.wast:259
let $$6 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x00\x00\x60\x01\x7f\x01\x7f\x02\xa9\x80\x80\x80\x00\x05\x01\x61\x03\x65\x66\x30\x00\x00\x01\x61\x03\x65\x66\x31\x00\x00\x01\x61\x03\x65\x66\x32\x00\x00\x01\x61\x03\x65\x66\x33\x00\x00\x01\x61\x03\x65\x66\x34\x00\x00\x03\x88\x80\x80\x80\x00\x07\x00\x00\x00\x00\x00\x01\x02\x04\x8d\x80\x80\x80\x00\x03\x70\x01\x1e\x1e\x70\x01\x1e\x1e\x70\x05\x1e\x1e\x07\x90\x80\x80\x80\x00\x02\x04\x74\x65\x73\x74\x00\x0a\x05\x63\x68\x65\x63\x6b\x00\x0b\x09\xb9\x80\x80\x80\x00\x04\x02\x01\x41\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x01\x41\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xcb\x80\x80\x80\x00\x07\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x0f\x41\x01\x41\x03\xfc\x0c\x03\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x01\x0b");

// table_init.wast:259
let $6 = instance($$6);

// table_init.wast:286
run(() => call($6, "test", []));

// table_init.wast:287
assert_trap(() => call($6, "check", [0]));

// table_init.wast:288
assert_trap(() => call($6, "check", [1]));

// table_init.wast:289
assert_return(() => call($6, "check", [2]), 3);

// table_init.wast:290
assert_return(() => call($6, "check", [3]), 1);

// table_init.wast:291
assert_return(() => call($6, "check", [4]), 4);

// table_init.wast:292
assert_return(() => call($6, "check", [5]), 1);

// table_init.wast:293
assert_trap(() => call($6, "check", [6]));

// table_init.wast:294
assert_trap(() => call($6, "check", [7]));

// table_init.wast:295
assert_trap(() => call($6, "check", [8]));

// table_init.wast:296
assert_trap(() => call($6, "check", [9]));

// table_init.wast:297
assert_trap(() => call($6, "check", [10]));

// table_init.wast:298
assert_trap(() => call($6, "check", [11]));

// table_init.wast:299
assert_return(() => call($6, "check", [12]), 7);

// table_init.wast:300
assert_return(() => call($6, "check", [13]), 5);

// table_init.wast:301
assert_return(() => call($6, "check", [14]), 2);

// table_init.wast:302
assert_return(() => call($6, "check", [15]), 9);

// table_init.wast:303
assert_return(() => call($6, "check", [16]), 2);

// table_init.wast:304
assert_return(() => call($6, "check", [17]), 7);

// table_init.wast:305
assert_trap(() => call($6, "check", [18]));

// table_init.wast:306
assert_trap(() => call($6, "check", [19]));

// table_init.wast:307
assert_trap(() => call($6, "check", [20]));

// table_init.wast:308
assert_trap(() => call($6, "check", [21]));

// table_init.wast:309
assert_trap(() => call($6, "check", [22]));

// table_init.wast:310
assert_trap(() => call($6, "check", [23]));

// table_init.wast:311
assert_trap(() => call($6, "check", [24]));

// table_init.wast:312
assert_trap(() => call($6, "check", [25]));

// table_init.wast:313
assert_trap(() => call($6, "check", [26]));

// table_init.wast:314
assert_trap(() => call($6, "check", [27]));

// table_init.wast:315
assert_trap(() => call($6, "check", [28]));

// table_init.wast:316
assert_trap(() => call($6, "check", [29]));

// table_init.wast:318
let $$7 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x00\x00\x60\x01\x7f\x01\x7f\x02\xa9\x80\x80\x80\x00\x05\x01\x61\x03\x65\x66\x30\x00\x00\x01\x61\x03\x65\x66\x31\x00\x00\x01\x61\x03\x65\x66\x32\x00\x00\x01\x61\x03\x65\x66\x33\x00\x00\x01\x61\x03\x65\x66\x34\x00\x00\x03\x88\x80\x80\x80\x00\x07\x00\x00\x00\x00\x00\x01\x02\x04\x8d\x80\x80\x80\x00\x03\x70\x01\x1e\x1e\x70\x01\x1e\x1e\x70\x05\x1e\x1e\x07\x90\x80\x80\x80\x00\x02\x04\x74\x65\x73\x74\x00\x0a\x05\x63\x68\x65\x63\x6b\x00\x0b\x09\xb9\x80\x80\x80\x00\x04\x02\x01\x41\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x01\x41\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\x8d\x81\x80\x80\x00\x07\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\xce\x80\x80\x80\x00\x00\x41\x07\x41\x00\x41\x04\xfc\x0c\x01\x01\xfc\x0d\x01\x41\x0f\x41\x01\x41\x03\xfc\x0c\x03\x01\xfc\x0d\x03\x41\x14\x41\x0f\x41\x05\xfc\x0e\x01\x01\x41\x15\x41\x1d\x41\x01\xfc\x0e\x01\x01\x41\x18\x41\x0a\x41\x01\xfc\x0e\x01\x01\x41\x0d\x41\x0b\x41\x04\xfc\x0e\x01\x01\x41\x13\x41\x14\x41\x05\xfc\x0e\x01\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x01\x0b");

// table_init.wast:318
let $7 = instance($$7);

// table_init.wast:353
run(() => call($7, "test", []));

// table_init.wast:354
assert_trap(() => call($7, "check", [0]));

// table_init.wast:355
assert_trap(() => call($7, "check", [1]));

// table_init.wast:356
assert_return(() => call($7, "check", [2]), 3);

// table_init.wast:357
assert_return(() => call($7, "check", [3]), 1);

// table_init.wast:358
assert_return(() => call($7, "check", [4]), 4);

// table_init.wast:359
assert_return(() => call($7, "check", [5]), 1);

// table_init.wast:360
assert_trap(() => call($7, "check", [6]));

// table_init.wast:361
assert_return(() => call($7, "check", [7]), 2);

// table_init.wast:362
assert_return(() => call($7, "check", [8]), 7);

// table_init.wast:363
assert_return(() => call($7, "check", [9]), 1);

// table_init.wast:364
assert_return(() => call($7, "check", [10]), 8);

// table_init.wast:365
assert_trap(() => call($7, "check", [11]));

// table_init.wast:366
assert_return(() => call($7, "check", [12]), 7);

// table_init.wast:367
assert_trap(() => call($7, "check", [13]));

// table_init.wast:368
assert_return(() => call($7, "check", [14]), 7);

// table_init.wast:369
assert_return(() => call($7, "check", [15]), 5);

// table_init.wast:370
assert_return(() => call($7, "check", [16]), 2);

// table_init.wast:371
assert_return(() => call($7, "check", [17]), 7);

// table_init.wast:372
assert_trap(() => call($7, "check", [18]));

// table_init.wast:373
assert_return(() => call($7, "check", [19]), 9);

// table_init.wast:374
assert_trap(() => call($7, "check", [20]));

// table_init.wast:375
assert_return(() => call($7, "check", [21]), 7);

// table_init.wast:376
assert_trap(() => call($7, "check", [22]));

// table_init.wast:377
assert_return(() => call($7, "check", [23]), 8);

// table_init.wast:378
assert_return(() => call($7, "check", [24]), 8);

// table_init.wast:379
assert_trap(() => call($7, "check", [25]));

// table_init.wast:380
assert_trap(() => call($7, "check", [26]));

// table_init.wast:381
assert_trap(() => call($7, "check", [27]));

// table_init.wast:382
assert_trap(() => call($7, "check", [28]));

// table_init.wast:383
assert_trap(() => call($7, "check", [29]));

// table_init.wast:385
let $$8 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x00\x00\x60\x01\x7e\x01\x7f\x02\xa9\x80\x80\x80\x00\x05\x01\x61\x03\x65\x66\x30\x00\x00\x01\x61\x03\x65\x66\x31\x00\x00\x01\x61\x03\x65\x66\x32\x00\x00\x01\x61\x03\x65\x66\x33\x00\x00\x01\x61\x03\x65\x66\x34\x00\x00\x03\x88\x80\x80\x80\x00\x07\x00\x00\x00\x00\x00\x01\x02\x04\x8d\x80\x80\x80\x00\x03\x70\x01\x1e\x1e\x70\x01\x1e\x1e\x70\x05\x1e\x1e\x07\x90\x80\x80\x80\x00\x02\x04\x74\x65\x73\x74\x00\x0a\x05\x63\x68\x65\x63\x6b\x00\x0b\x09\xb9\x80\x80\x80\x00\x04\x02\x02\x42\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x02\x42\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xcb\x80\x80\x80\x00\x07\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x42\x07\x41\x00\x41\x04\xfc\x0c\x01\x02\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x02\x0b");

// table_init.wast:385
let $8 = instance($$8);

// table_init.wast:412
run(() => call($8, "test", []));

// table_init.wast:413
assert_trap(() => call($8, "check", [0n]));

// table_init.wast:414
assert_trap(() => call($8, "check", [1n]));

// table_init.wast:415
assert_return(() => call($8, "check", [2n]), 3);

// table_init.wast:416
assert_return(() => call($8, "check", [3n]), 1);

// table_init.wast:417
assert_return(() => call($8, "check", [4n]), 4);

// table_init.wast:418
assert_return(() => call($8, "check", [5n]), 1);

// table_init.wast:419
assert_trap(() => call($8, "check", [6n]));

// table_init.wast:420
assert_return(() => call($8, "check", [7n]), 2);

// table_init.wast:421
assert_return(() => call($8, "check", [8n]), 7);

// table_init.wast:422
assert_return(() => call($8, "check", [9n]), 1);

// table_init.wast:423
assert_return(() => call($8, "check", [10n]), 8);

// table_init.wast:424
assert_trap(() => call($8, "check", [11n]));

// table_init.wast:425
assert_return(() => call($8, "check", [12n]), 7);

// table_init.wast:426
assert_return(() => call($8, "check", [13n]), 5);

// table_init.wast:427
assert_return(() => call($8, "check", [14n]), 2);

// table_init.wast:428
assert_return(() => call($8, "check", [15n]), 3);

// table_init.wast:429
assert_return(() => call($8, "check", [16n]), 6);

// table_init.wast:430
assert_trap(() => call($8, "check", [17n]));

// table_init.wast:431
assert_trap(() => call($8, "check", [18n]));

// table_init.wast:432
assert_trap(() => call($8, "check", [19n]));

// table_init.wast:433
assert_trap(() => call($8, "check", [20n]));

// table_init.wast:434
assert_trap(() => call($8, "check", [21n]));

// table_init.wast:435
assert_trap(() => call($8, "check", [22n]));

// table_init.wast:436
assert_trap(() => call($8, "check", [23n]));

// table_init.wast:437
assert_trap(() => call($8, "check", [24n]));

// table_init.wast:438
assert_trap(() => call($8, "check", [25n]));

// table_init.wast:439
assert_trap(() => call($8, "check", [26n]));

// table_init.wast:440
assert_trap(() => call($8, "check", [27n]));

// table_init.wast:441
assert_trap(() => call($8, "check", [28n]));

// table_init.wast:442
assert_trap(() => call($8, "check", [29n]));

// table_init.wast:444
let $$9 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x00\x00\x60\x01\x7e\x01\x7f\x02\xa9\x80\x80\x80\x00\x05\x01\x61\x03\x65\x66\x30\x00\x00\x01\x61\x03\x65\x66\x31\x00\x00\x01\x61\x03\x65\x66\x32\x00\x00\x01\x61\x03\x65\x66\x33\x00\x00\x01\x61\x03\x65\x66\x34\x00\x00\x03\x88\x80\x80\x80\x00\x07\x00\x00\x00\x00\x00\x01\x02\x04\x8d\x80\x80\x80\x00\x03\x70\x01\x1e\x1e\x70\x01\x1e\x1e\x70\x05\x1e\x1e\x07\x90\x80\x80\x80\x00\x02\x04\x74\x65\x73\x74\x00\x0a\x05\x63\x68\x65\x63\x6b\x00\x0b\x09\xb9\x80\x80\x80\x00\x04\x02\x02\x42\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x02\x42\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xcb\x80\x80\x80\x00\x07\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x42\x0f\x41\x01\x41\x03\xfc\x0c\x03\x02\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x02\x0b");

// table_init.wast:444
let $9 = instance($$9);

// table_init.wast:471
run(() => call($9, "test", []));

// table_init.wast:472
assert_trap(() => call($9, "check", [0n]));

// table_init.wast:473
assert_trap(() => call($9, "check", [1n]));

// table_init.wast:474
assert_return(() => call($9, "check", [2n]), 3);

// table_init.wast:475
assert_return(() => call($9, "check", [3n]), 1);

// table_init.wast:476
assert_return(() => call($9, "check", [4n]), 4);

// table_init.wast:477
assert_return(() => call($9, "check", [5n]), 1);

// table_init.wast:478
assert_trap(() => call($9, "check", [6n]));

// table_init.wast:479
assert_trap(() => call($9, "check", [7n]));

// table_init.wast:480
assert_trap(() => call($9, "check", [8n]));

// table_init.wast:481
assert_trap(() => call($9, "check", [9n]));

// table_init.wast:482
assert_trap(() => call($9, "check", [10n]));

// table_init.wast:483
assert_trap(() => call($9, "check", [11n]));

// table_init.wast:484
assert_return(() => call($9, "check", [12n]), 7);

// table_init.wast:485
assert_return(() => call($9, "check", [13n]), 5);

// table_init.wast:486
assert_return(() => call($9, "check", [14n]), 2);

// table_init.wast:487
assert_return(() => call($9, "check", [15n]), 9);

// table_init.wast:488
assert_return(() => call($9, "check", [16n]), 2);

// table_init.wast:489
assert_return(() => call($9, "check", [17n]), 7);

// table_init.wast:490
assert_trap(() => call($9, "check", [18n]));

// table_init.wast:491
assert_trap(() => call($9, "check", [19n]));

// table_init.wast:492
assert_trap(() => call($9, "check", [20n]));

// table_init.wast:493
assert_trap(() => call($9, "check", [21n]));

// table_init.wast:494
assert_trap(() => call($9, "check", [22n]));

// table_init.wast:495
assert_trap(() => call($9, "check", [23n]));

// table_init.wast:496
assert_trap(() => call($9, "check", [24n]));

// table_init.wast:497
assert_trap(() => call($9, "check", [25n]));

// table_init.wast:498
assert_trap(() => call($9, "check", [26n]));

// table_init.wast:499
assert_trap(() => call($9, "check", [27n]));

// table_init.wast:500
assert_trap(() => call($9, "check", [28n]));

// table_init.wast:501
assert_trap(() => call($9, "check", [29n]));

// table_init.wast:503
let $$10 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x00\x00\x60\x01\x7e\x01\x7f\x02\xa9\x80\x80\x80\x00\x05\x01\x61\x03\x65\x66\x30\x00\x00\x01\x61\x03\x65\x66\x31\x00\x00\x01\x61\x03\x65\x66\x32\x00\x00\x01\x61\x03\x65\x66\x33\x00\x00\x01\x61\x03\x65\x66\x34\x00\x00\x03\x88\x80\x80\x80\x00\x07\x00\x00\x00\x00\x00\x01\x02\x04\x8d\x80\x80\x80\x00\x03\x70\x01\x1e\x1e\x70\x01\x1e\x1e\x70\x05\x1e\x1e\x07\x90\x80\x80\x80\x00\x02\x04\x74\x65\x73\x74\x00\x0a\x05\x63\x68\x65\x63\x6b\x00\x0b\x09\xb9\x80\x80\x80\x00\x04\x02\x02\x42\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x02\x42\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\x8d\x81\x80\x80\x00\x07\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\xce\x80\x80\x80\x00\x00\x42\x07\x41\x00\x41\x04\xfc\x0c\x01\x02\xfc\x0d\x01\x42\x0f\x41\x01\x41\x03\xfc\x0c\x03\x02\xfc\x0d\x03\x42\x14\x42\x0f\x42\x05\xfc\x0e\x02\x02\x42\x15\x42\x1d\x42\x01\xfc\x0e\x02\x02\x42\x18\x42\x0a\x42\x01\xfc\x0e\x02\x02\x42\x0d\x42\x0b\x42\x04\xfc\x0e\x02\x02\x42\x13\x42\x14\x42\x05\xfc\x0e\x02\x02\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x02\x0b");

// table_init.wast:503
let $10 = instance($$10);

// table_init.wast:538
run(() => call($10, "test", []));

// table_init.wast:539
assert_trap(() => call($10, "check", [0n]));

// table_init.wast:540
assert_trap(() => call($10, "check", [1n]));

// table_init.wast:541
assert_return(() => call($10, "check", [2n]), 3);

// table_init.wast:542
assert_return(() => call($10, "check", [3n]), 1);

// table_init.wast:543
assert_return(() => call($10, "check", [4n]), 4);

// table_init.wast:544
assert_return(() => call($10, "check", [5n]), 1);

// table_init.wast:545
assert_trap(() => call($10, "check", [6n]));

// table_init.wast:546
assert_return(() => call($10, "check", [7n]), 2);

// table_init.wast:547
assert_return(() => call($10, "check", [8n]), 7);

// table_init.wast:548
assert_return(() => call($10, "check", [9n]), 1);

// table_init.wast:549
assert_return(() => call($10, "check", [10n]), 8);

// table_init.wast:550
assert_trap(() => call($10, "check", [11n]));

// table_init.wast:551
assert_return(() => call($10, "check", [12n]), 7);

// table_init.wast:552
assert_trap(() => call($10, "check", [13n]));

// table_init.wast:553
assert_return(() => call($10, "check", [14n]), 7);

// table_init.wast:554
assert_return(() => call($10, "check", [15n]), 5);

// table_init.wast:555
assert_return(() => call($10, "check", [16n]), 2);

// table_init.wast:556
assert_return(() => call($10, "check", [17n]), 7);

// table_init.wast:557
assert_trap(() => call($10, "check", [18n]));

// table_init.wast:558
assert_return(() => call($10, "check", [19n]), 9);

// table_init.wast:559
assert_trap(() => call($10, "check", [20n]));

// table_init.wast:560
assert_return(() => call($10, "check", [21n]), 7);

// table_init.wast:561
assert_trap(() => call($10, "check", [22n]));

// table_init.wast:562
assert_return(() => call($10, "check", [23n]), 8);

// table_init.wast:563
assert_return(() => call($10, "check", [24n]), 8);

// table_init.wast:564
assert_trap(() => call($10, "check", [25n]));

// table_init.wast:565
assert_trap(() => call($10, "check", [26n]));

// table_init.wast:566
assert_trap(() => call($10, "check", [27n]));

// table_init.wast:567
assert_trap(() => call($10, "check", [28n]));

// table_init.wast:568
assert_trap(() => call($10, "check", [29n]));

// table_init.wast:569
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x00\x0a\x8b\x80\x80\x80\x00\x01\x85\x80\x80\x80\x00\x00\xfc\x0d\x00\x0b");

// table_init.wast:575
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x00\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x41\x0c\x41\x01\x41\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:581
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x01\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x87\x80\x80\x80\x00\x01\x05\x70\x01\xd2\x00\x0b\x0a\x94\x80\x80\x80\x00\x02\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x85\x80\x80\x80\x00\x00\xfc\x0d\x04\x0b");

// table_init.wast:589
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x01\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x87\x80\x80\x80\x00\x01\x05\x70\x01\xd2\x00\x0b\x0a\x9b\x80\x80\x80\x00\x02\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x8c\x80\x80\x80\x00\x00\x41\x0c\x41\x01\x41\x01\xfc\x0c\x04\x00\x0b");

// table_init.wast:598
let $$11 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xe5\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x85\x80\x80\x80\x00\x00\xfc\x0d\x02\x0b");

// table_init.wast:598
let $11 = instance($$11);

// table_init.wast:620
run(() => call($11, "test", []));

// table_init.wast:622
let $$12 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x0c\x41\x01\x41\x01\xfc\x0c\x02\x00\x0b");

// table_init.wast:622
let $12 = instance($$12);

// table_init.wast:644
assert_trap(() => call($12, "test", []));

// table_init.wast:646
let $$13 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xf6\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x96\x80\x80\x80\x00\x00\x41\x0c\x41\x01\x41\x01\xfc\x0c\x01\x00\x41\x15\x41\x01\x41\x01\xfc\x0c\x01\x00\x0b");

// table_init.wast:646
let $13 = instance($$13);

// table_init.wast:668
run(() => call($13, "test", []));

// table_init.wast:670
let $$14 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xe8\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x88\x80\x80\x80\x00\x00\xfc\x0d\x01\xfc\x0d\x01\x0b");

// table_init.wast:670
let $14 = instance($$14);

// table_init.wast:692
run(() => call($14, "test", []));

// table_init.wast:694
let $$15 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xef\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8f\x80\x80\x80\x00\x00\xfc\x0d\x01\x41\x0c\x41\x01\x41\x01\xfc\x0c\x01\x00\x0b");

// table_init.wast:694
let $15 = instance($$15);

// table_init.wast:716
assert_trap(() => call($15, "test", []));

// table_init.wast:718
let $$16 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x0c\x41\x00\x41\x05\xfc\x0c\x01\x00\x0b");

// table_init.wast:718
let $16 = instance($$16);

// table_init.wast:740
assert_trap(() => call($16, "test", []));

// table_init.wast:742
let $$17 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x0c\x41\x02\x41\x03\xfc\x0c\x01\x00\x0b");

// table_init.wast:742
let $17 = instance($$17);

// table_init.wast:764
assert_trap(() => call($17, "test", []));

// table_init.wast:766
let $$18 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x1c\x41\x01\x41\x03\xfc\x0c\x01\x00\x0b");

// table_init.wast:766
let $18 = instance($$18);

// table_init.wast:788
assert_trap(() => call($18, "test", []));

// table_init.wast:790
let $$19 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x0c\x41\x04\x41\x00\xfc\x0c\x01\x00\x0b");

// table_init.wast:790
let $19 = instance($$19);

// table_init.wast:812
run(() => call($19, "test", []));

// table_init.wast:814
let $$20 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x0c\x41\x05\x41\x00\xfc\x0c\x01\x00\x0b");

// table_init.wast:814
let $20 = instance($$20);

// table_init.wast:836
assert_trap(() => call($20, "test", []));

// table_init.wast:838
let $$21 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x1e\x41\x02\x41\x00\xfc\x0c\x01\x00\x0b");

// table_init.wast:838
let $21 = instance($$21);

// table_init.wast:860
run(() => call($21, "test", []));

// table_init.wast:862
let $$22 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x1f\x41\x02\x41\x00\xfc\x0c\x01\x00\x0b");

// table_init.wast:862
let $22 = instance($$22);

// table_init.wast:884
assert_trap(() => call($22, "test", []));

// table_init.wast:886
let $$23 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x1e\x41\x04\x41\x00\xfc\x0c\x01\x00\x0b");

// table_init.wast:886
let $23 = instance($$23);

// table_init.wast:908
run(() => call($23, "test", []));

// table_init.wast:910
let $$24 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x1f\x41\x05\x41\x00\xfc\x0c\x01\x00\x0b");

// table_init.wast:910
let $24 = instance($$24);

// table_init.wast:932
assert_trap(() => call($24, "test", []));

// table_init.wast:934
let $$25 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb9\x80\x80\x80\x00\x04\x02\x01\x41\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x01\x41\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x1a\x41\x01\x41\x03\xfc\x0c\x01\x01\x0b");

// table_init.wast:934
let $25 = instance($$25);

// table_init.wast:956
assert_trap(() => call($25, "test", []));

// table_init.wast:958
let $$26 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb9\x80\x80\x80\x00\x04\x02\x01\x41\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x01\x41\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x0c\x41\x04\x41\x00\xfc\x0c\x01\x01\x0b");

// table_init.wast:958
let $26 = instance($$26);

// table_init.wast:980
run(() => call($26, "test", []));

// table_init.wast:982
let $$27 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb9\x80\x80\x80\x00\x04\x02\x01\x41\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x01\x41\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x0c\x41\x05\x41\x00\xfc\x0c\x01\x01\x0b");

// table_init.wast:982
let $27 = instance($$27);

// table_init.wast:1004
assert_trap(() => call($27, "test", []));

// table_init.wast:1006
let $$28 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb9\x80\x80\x80\x00\x04\x02\x01\x41\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x01\x41\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x1c\x41\x02\x41\x00\xfc\x0c\x01\x01\x0b");

// table_init.wast:1006
let $28 = instance($$28);

// table_init.wast:1028
run(() => call($28, "test", []));

// table_init.wast:1030
let $$29 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb9\x80\x80\x80\x00\x04\x02\x01\x41\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x01\x41\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x1d\x41\x02\x41\x00\xfc\x0c\x01\x01\x0b");

// table_init.wast:1030
let $29 = instance($$29);

// table_init.wast:1052
assert_trap(() => call($29, "test", []));

// table_init.wast:1054
let $$30 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb9\x80\x80\x80\x00\x04\x02\x01\x41\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x01\x41\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x1c\x41\x04\x41\x00\xfc\x0c\x01\x01\x0b");

// table_init.wast:1054
let $30 = instance($$30);

// table_init.wast:1076
run(() => call($30, "test", []));

// table_init.wast:1078
let $$31 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb9\x80\x80\x80\x00\x04\x02\x01\x41\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x01\x41\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x1d\x41\x05\x41\x00\xfc\x0c\x01\x01\x0b");

// table_init.wast:1078
let $31 = instance($$31);

// table_init.wast:1100
assert_trap(() => call($31, "test", []));

// table_init.wast:1102
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x41\x01\x41\x01\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1111
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x99\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x41\x01\x41\x01\x42\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1120
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x41\x01\x41\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1129
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x41\x01\x43\x00\x00\x80\x3f\x41\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1138
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9f\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x92\x80\x80\x80\x00\x00\x41\x01\x43\x00\x00\x80\x3f\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1147
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x41\x01\x43\x00\x00\x80\x3f\x42\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1156
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x41\x01\x43\x00\x00\x80\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1165
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x99\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x41\x01\x42\x01\x41\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1174
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x41\x01\x42\x01\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1183
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x99\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x41\x01\x42\x01\x42\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1192
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x41\x01\x42\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1201
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x41\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1210
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x41\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1219
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x41\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x42\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1228
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa7\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x9a\x80\x80\x80\x00\x00\x41\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1237
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x41\x01\x41\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1246
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9f\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x92\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x41\x01\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1255
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x41\x01\x42\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1264
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x41\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1273
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9f\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x92\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x43\x00\x00\x80\x3f\x41\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1282
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa2\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x95\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x43\x00\x00\x80\x3f\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1291
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9f\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x92\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x43\x00\x00\x80\x3f\x42\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1300
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa6\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x99\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x43\x00\x00\x80\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1309
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x42\x01\x41\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1318
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9f\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x92\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x42\x01\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1327
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x42\x01\x42\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1336
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x42\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1345
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1354
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa6\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x99\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1363
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x42\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1372
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xaa\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x9d\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1381
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x99\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x42\x01\x41\x01\x41\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1390
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x42\x01\x41\x01\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1399
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x99\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x42\x01\x41\x01\x42\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1408
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x42\x01\x41\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1417
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x42\x01\x43\x00\x00\x80\x3f\x41\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1426
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9f\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x92\x80\x80\x80\x00\x00\x42\x01\x43\x00\x00\x80\x3f\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1435
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x42\x01\x43\x00\x00\x80\x3f\x42\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1444
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x42\x01\x43\x00\x00\x80\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1453
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x99\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x42\x01\x42\x01\x41\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1462
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x42\x01\x42\x01\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1471
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x99\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x42\x01\x42\x01\x42\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1480
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x42\x01\x42\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1489
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x42\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1498
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x42\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1507
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x42\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x42\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1516
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa7\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x9a\x80\x80\x80\x00\x00\x42\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1525
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\x41\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1534
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1543
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\x42\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1552
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa7\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x9a\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1561
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x43\x00\x00\x80\x3f\x41\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1570
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa6\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x99\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x43\x00\x00\x80\x3f\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1579
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x43\x00\x00\x80\x3f\x42\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1588
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xaa\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x9d\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x43\x00\x00\x80\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1597
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x42\x01\x41\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1606
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x42\x01\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1615
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x42\x01\x42\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1624
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa7\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x9a\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x42\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1633
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa7\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x9a\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1642
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xaa\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x9d\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1651
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa7\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x9a\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x42\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1660
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xae\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\xa1\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b");

// table_init.wast:1669
let $$32 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8f\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x01\x7f\x01\x7f\x60\x02\x7f\x7f\x00\x03\x93\x80\x80\x80\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x04\x85\x80\x80\x80\x00\x01\x70\x01\x20\x40\x07\xe4\x80\x80\x80\x00\x12\x02\x66\x30\x00\x00\x02\x66\x31\x00\x01\x02\x66\x32\x00\x02\x02\x66\x33\x00\x03\x02\x66\x34\x00\x04\x02\x66\x35\x00\x05\x02\x66\x36\x00\x06\x02\x66\x37\x00\x07\x02\x66\x38\x00\x08\x02\x66\x39\x00\x09\x03\x66\x31\x30\x00\x0a\x03\x66\x31\x31\x00\x0b\x03\x66\x31\x32\x00\x0c\x03\x66\x31\x33\x00\x0d\x03\x66\x31\x34\x00\x0e\x03\x66\x31\x35\x00\x0f\x04\x74\x65\x73\x74\x00\x10\x03\x72\x75\x6e\x00\x11\x09\xb4\x80\x80\x80\x00\x01\x05\x70\x10\xd2\x00\x0b\xd2\x01\x0b\xd2\x02\x0b\xd2\x03\x0b\xd2\x04\x0b\xd2\x05\x0b\xd2\x06\x0b\xd2\x07\x0b\xd2\x08\x0b\xd2\x09\x0b\xd2\x0a\x0b\xd2\x0b\x0b\xd2\x0c\x0b\xd2\x0d\x0b\xd2\x0e\x0b\xd2\x0f\x0b\x0a\xae\x81\x80\x80\x00\x12\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x84\x80\x80\x80\x00\x00\x41\x0a\x0b\x84\x80\x80\x80\x00\x00\x41\x0b\x0b\x84\x80\x80\x80\x00\x00\x41\x0c\x0b\x84\x80\x80\x80\x00\x00\x41\x0d\x0b\x84\x80\x80\x80\x00\x00\x41\x0e\x0b\x84\x80\x80\x80\x00\x00\x41\x0f\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x41\x00\x20\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1669
let $32 = instance($$32);

// table_init.wast:1697
assert_trap(() => call($32, "run", [24, 16]));

// table_init.wast:1698
assert_trap(() => call($32, "test", [0]));

// table_init.wast:1699
assert_trap(() => call($32, "test", [1]));

// table_init.wast:1700
assert_trap(() => call($32, "test", [2]));

// table_init.wast:1701
assert_trap(() => call($32, "test", [3]));

// table_init.wast:1702
assert_trap(() => call($32, "test", [4]));

// table_init.wast:1703
assert_trap(() => call($32, "test", [5]));

// table_init.wast:1704
assert_trap(() => call($32, "test", [6]));

// table_init.wast:1705
assert_trap(() => call($32, "test", [7]));

// table_init.wast:1706
assert_trap(() => call($32, "test", [8]));

// table_init.wast:1707
assert_trap(() => call($32, "test", [9]));

// table_init.wast:1708
assert_trap(() => call($32, "test", [10]));

// table_init.wast:1709
assert_trap(() => call($32, "test", [11]));

// table_init.wast:1710
assert_trap(() => call($32, "test", [12]));

// table_init.wast:1711
assert_trap(() => call($32, "test", [13]));

// table_init.wast:1712
assert_trap(() => call($32, "test", [14]));

// table_init.wast:1713
assert_trap(() => call($32, "test", [15]));

// table_init.wast:1714
assert_trap(() => call($32, "test", [16]));

// table_init.wast:1715
assert_trap(() => call($32, "test", [17]));

// table_init.wast:1716
assert_trap(() => call($32, "test", [18]));

// table_init.wast:1717
assert_trap(() => call($32, "test", [19]));

// table_init.wast:1718
assert_trap(() => call($32, "test", [20]));

// table_init.wast:1719
assert_trap(() => call($32, "test", [21]));

// table_init.wast:1720
assert_trap(() => call($32, "test", [22]));

// table_init.wast:1721
assert_trap(() => call($32, "test", [23]));

// table_init.wast:1722
assert_trap(() => call($32, "test", [24]));

// table_init.wast:1723
assert_trap(() => call($32, "test", [25]));

// table_init.wast:1724
assert_trap(() => call($32, "test", [26]));

// table_init.wast:1725
assert_trap(() => call($32, "test", [27]));

// table_init.wast:1726
assert_trap(() => call($32, "test", [28]));

// table_init.wast:1727
assert_trap(() => call($32, "test", [29]));

// table_init.wast:1728
assert_trap(() => call($32, "test", [30]));

// table_init.wast:1729
assert_trap(() => call($32, "test", [31]));

// table_init.wast:1731
let $$33 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8f\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x01\x7f\x01\x7f\x60\x02\x7f\x7f\x00\x03\x93\x80\x80\x80\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x04\x85\x80\x80\x80\x00\x01\x70\x01\x20\x40\x07\xe4\x80\x80\x80\x00\x12\x02\x66\x30\x00\x00\x02\x66\x31\x00\x01\x02\x66\x32\x00\x02\x02\x66\x33\x00\x03\x02\x66\x34\x00\x04\x02\x66\x35\x00\x05\x02\x66\x36\x00\x06\x02\x66\x37\x00\x07\x02\x66\x38\x00\x08\x02\x66\x39\x00\x09\x03\x66\x31\x30\x00\x0a\x03\x66\x31\x31\x00\x0b\x03\x66\x31\x32\x00\x0c\x03\x66\x31\x33\x00\x0d\x03\x66\x31\x34\x00\x0e\x03\x66\x31\x35\x00\x0f\x04\x74\x65\x73\x74\x00\x10\x03\x72\x75\x6e\x00\x11\x09\xb4\x80\x80\x80\x00\x01\x05\x70\x10\xd2\x00\x0b\xd2\x01\x0b\xd2\x02\x0b\xd2\x03\x0b\xd2\x04\x0b\xd2\x05\x0b\xd2\x06\x0b\xd2\x07\x0b\xd2\x08\x0b\xd2\x09\x0b\xd2\x0a\x0b\xd2\x0b\x0b\xd2\x0c\x0b\xd2\x0d\x0b\xd2\x0e\x0b\xd2\x0f\x0b\x0a\xae\x81\x80\x80\x00\x12\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x84\x80\x80\x80\x00\x00\x41\x0a\x0b\x84\x80\x80\x80\x00\x00\x41\x0b\x0b\x84\x80\x80\x80\x00\x00\x41\x0c\x0b\x84\x80\x80\x80\x00\x00\x41\x0d\x0b\x84\x80\x80\x80\x00\x00\x41\x0e\x0b\x84\x80\x80\x80\x00\x00\x41\x0f\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x41\x00\x20\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1731
let $33 = instance($$33);

// table_init.wast:1759
assert_trap(() => call($33, "run", [25, 16]));

// table_init.wast:1760
assert_trap(() => call($33, "test", [0]));

// table_init.wast:1761
assert_trap(() => call($33, "test", [1]));

// table_init.wast:1762
assert_trap(() => call($33, "test", [2]));

// table_init.wast:1763
assert_trap(() => call($33, "test", [3]));

// table_init.wast:1764
assert_trap(() => call($33, "test", [4]));

// table_init.wast:1765
assert_trap(() => call($33, "test", [5]));

// table_init.wast:1766
assert_trap(() => call($33, "test", [6]));

// table_init.wast:1767
assert_trap(() => call($33, "test", [7]));

// table_init.wast:1768
assert_trap(() => call($33, "test", [8]));

// table_init.wast:1769
assert_trap(() => call($33, "test", [9]));

// table_init.wast:1770
assert_trap(() => call($33, "test", [10]));

// table_init.wast:1771
assert_trap(() => call($33, "test", [11]));

// table_init.wast:1772
assert_trap(() => call($33, "test", [12]));

// table_init.wast:1773
assert_trap(() => call($33, "test", [13]));

// table_init.wast:1774
assert_trap(() => call($33, "test", [14]));

// table_init.wast:1775
assert_trap(() => call($33, "test", [15]));

// table_init.wast:1776
assert_trap(() => call($33, "test", [16]));

// table_init.wast:1777
assert_trap(() => call($33, "test", [17]));

// table_init.wast:1778
assert_trap(() => call($33, "test", [18]));

// table_init.wast:1779
assert_trap(() => call($33, "test", [19]));

// table_init.wast:1780
assert_trap(() => call($33, "test", [20]));

// table_init.wast:1781
assert_trap(() => call($33, "test", [21]));

// table_init.wast:1782
assert_trap(() => call($33, "test", [22]));

// table_init.wast:1783
assert_trap(() => call($33, "test", [23]));

// table_init.wast:1784
assert_trap(() => call($33, "test", [24]));

// table_init.wast:1785
assert_trap(() => call($33, "test", [25]));

// table_init.wast:1786
assert_trap(() => call($33, "test", [26]));

// table_init.wast:1787
assert_trap(() => call($33, "test", [27]));

// table_init.wast:1788
assert_trap(() => call($33, "test", [28]));

// table_init.wast:1789
assert_trap(() => call($33, "test", [29]));

// table_init.wast:1790
assert_trap(() => call($33, "test", [30]));

// table_init.wast:1791
assert_trap(() => call($33, "test", [31]));

// table_init.wast:1793
let $$34 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8f\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x01\x7f\x01\x7f\x60\x02\x7f\x7f\x00\x03\x93\x80\x80\x80\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x04\x87\x80\x80\x80\x00\x01\x70\x01\xa0\x01\xc0\x02\x07\xe4\x80\x80\x80\x00\x12\x02\x66\x30\x00\x00\x02\x66\x31\x00\x01\x02\x66\x32\x00\x02\x02\x66\x33\x00\x03\x02\x66\x34\x00\x04\x02\x66\x35\x00\x05\x02\x66\x36\x00\x06\x02\x66\x37\x00\x07\x02\x66\x38\x00\x08\x02\x66\x39\x00\x09\x03\x66\x31\x30\x00\x0a\x03\x66\x31\x31\x00\x0b\x03\x66\x31\x32\x00\x0c\x03\x66\x31\x33\x00\x0d\x03\x66\x31\x34\x00\x0e\x03\x66\x31\x35\x00\x0f\x04\x74\x65\x73\x74\x00\x10\x03\x72\x75\x6e\x00\x11\x09\xb4\x80\x80\x80\x00\x01\x05\x70\x10\xd2\x00\x0b\xd2\x01\x0b\xd2\x02\x0b\xd2\x03\x0b\xd2\x04\x0b\xd2\x05\x0b\xd2\x06\x0b\xd2\x07\x0b\xd2\x08\x0b\xd2\x09\x0b\xd2\x0a\x0b\xd2\x0b\x0b\xd2\x0c\x0b\xd2\x0d\x0b\xd2\x0e\x0b\xd2\x0f\x0b\x0a\xae\x81\x80\x80\x00\x12\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x84\x80\x80\x80\x00\x00\x41\x0a\x0b\x84\x80\x80\x80\x00\x00\x41\x0b\x0b\x84\x80\x80\x80\x00\x00\x41\x0c\x0b\x84\x80\x80\x80\x00\x00\x41\x0d\x0b\x84\x80\x80\x80\x00\x00\x41\x0e\x0b\x84\x80\x80\x80\x00\x00\x41\x0f\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x41\x00\x20\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1793
let $34 = instance($$34);

// table_init.wast:1821
assert_trap(() => call($34, "run", [96, 32]));

// table_init.wast:1822
assert_trap(() => call($34, "test", [0]));

// table_init.wast:1823
assert_trap(() => call($34, "test", [1]));

// table_init.wast:1824
assert_trap(() => call($34, "test", [2]));

// table_init.wast:1825
assert_trap(() => call($34, "test", [3]));

// table_init.wast:1826
assert_trap(() => call($34, "test", [4]));

// table_init.wast:1827
assert_trap(() => call($34, "test", [5]));

// table_init.wast:1828
assert_trap(() => call($34, "test", [6]));

// table_init.wast:1829
assert_trap(() => call($34, "test", [7]));

// table_init.wast:1830
assert_trap(() => call($34, "test", [8]));

// table_init.wast:1831
assert_trap(() => call($34, "test", [9]));

// table_init.wast:1832
assert_trap(() => call($34, "test", [10]));

// table_init.wast:1833
assert_trap(() => call($34, "test", [11]));

// table_init.wast:1834
assert_trap(() => call($34, "test", [12]));

// table_init.wast:1835
assert_trap(() => call($34, "test", [13]));

// table_init.wast:1836
assert_trap(() => call($34, "test", [14]));

// table_init.wast:1837
assert_trap(() => call($34, "test", [15]));

// table_init.wast:1838
assert_trap(() => call($34, "test", [16]));

// table_init.wast:1839
assert_trap(() => call($34, "test", [17]));

// table_init.wast:1840
assert_trap(() => call($34, "test", [18]));

// table_init.wast:1841
assert_trap(() => call($34, "test", [19]));

// table_init.wast:1842
assert_trap(() => call($34, "test", [20]));

// table_init.wast:1843
assert_trap(() => call($34, "test", [21]));

// table_init.wast:1844
assert_trap(() => call($34, "test", [22]));

// table_init.wast:1845
assert_trap(() => call($34, "test", [23]));

// table_init.wast:1846
assert_trap(() => call($34, "test", [24]));

// table_init.wast:1847
assert_trap(() => call($34, "test", [25]));

// table_init.wast:1848
assert_trap(() => call($34, "test", [26]));

// table_init.wast:1849
assert_trap(() => call($34, "test", [27]));

// table_init.wast:1850
assert_trap(() => call($34, "test", [28]));

// table_init.wast:1851
assert_trap(() => call($34, "test", [29]));

// table_init.wast:1852
assert_trap(() => call($34, "test", [30]));

// table_init.wast:1853
assert_trap(() => call($34, "test", [31]));

// table_init.wast:1854
assert_trap(() => call($34, "test", [32]));

// table_init.wast:1855
assert_trap(() => call($34, "test", [33]));

// table_init.wast:1856
assert_trap(() => call($34, "test", [34]));

// table_init.wast:1857
assert_trap(() => call($34, "test", [35]));

// table_init.wast:1858
assert_trap(() => call($34, "test", [36]));

// table_init.wast:1859
assert_trap(() => call($34, "test", [37]));

// table_init.wast:1860
assert_trap(() => call($34, "test", [38]));

// table_init.wast:1861
assert_trap(() => call($34, "test", [39]));

// table_init.wast:1862
assert_trap(() => call($34, "test", [40]));

// table_init.wast:1863
assert_trap(() => call($34, "test", [41]));

// table_init.wast:1864
assert_trap(() => call($34, "test", [42]));

// table_init.wast:1865
assert_trap(() => call($34, "test", [43]));

// table_init.wast:1866
assert_trap(() => call($34, "test", [44]));

// table_init.wast:1867
assert_trap(() => call($34, "test", [45]));

// table_init.wast:1868
assert_trap(() => call($34, "test", [46]));

// table_init.wast:1869
assert_trap(() => call($34, "test", [47]));

// table_init.wast:1870
assert_trap(() => call($34, "test", [48]));

// table_init.wast:1871
assert_trap(() => call($34, "test", [49]));

// table_init.wast:1872
assert_trap(() => call($34, "test", [50]));

// table_init.wast:1873
assert_trap(() => call($34, "test", [51]));

// table_init.wast:1874
assert_trap(() => call($34, "test", [52]));

// table_init.wast:1875
assert_trap(() => call($34, "test", [53]));

// table_init.wast:1876
assert_trap(() => call($34, "test", [54]));

// table_init.wast:1877
assert_trap(() => call($34, "test", [55]));

// table_init.wast:1878
assert_trap(() => call($34, "test", [56]));

// table_init.wast:1879
assert_trap(() => call($34, "test", [57]));

// table_init.wast:1880
assert_trap(() => call($34, "test", [58]));

// table_init.wast:1881
assert_trap(() => call($34, "test", [59]));

// table_init.wast:1882
assert_trap(() => call($34, "test", [60]));

// table_init.wast:1883
assert_trap(() => call($34, "test", [61]));

// table_init.wast:1884
assert_trap(() => call($34, "test", [62]));

// table_init.wast:1885
assert_trap(() => call($34, "test", [63]));

// table_init.wast:1886
assert_trap(() => call($34, "test", [64]));

// table_init.wast:1887
assert_trap(() => call($34, "test", [65]));

// table_init.wast:1888
assert_trap(() => call($34, "test", [66]));

// table_init.wast:1889
assert_trap(() => call($34, "test", [67]));

// table_init.wast:1890
assert_trap(() => call($34, "test", [68]));

// table_init.wast:1891
assert_trap(() => call($34, "test", [69]));

// table_init.wast:1892
assert_trap(() => call($34, "test", [70]));

// table_init.wast:1893
assert_trap(() => call($34, "test", [71]));

// table_init.wast:1894
assert_trap(() => call($34, "test", [72]));

// table_init.wast:1895
assert_trap(() => call($34, "test", [73]));

// table_init.wast:1896
assert_trap(() => call($34, "test", [74]));

// table_init.wast:1897
assert_trap(() => call($34, "test", [75]));

// table_init.wast:1898
assert_trap(() => call($34, "test", [76]));

// table_init.wast:1899
assert_trap(() => call($34, "test", [77]));

// table_init.wast:1900
assert_trap(() => call($34, "test", [78]));

// table_init.wast:1901
assert_trap(() => call($34, "test", [79]));

// table_init.wast:1902
assert_trap(() => call($34, "test", [80]));

// table_init.wast:1903
assert_trap(() => call($34, "test", [81]));

// table_init.wast:1904
assert_trap(() => call($34, "test", [82]));

// table_init.wast:1905
assert_trap(() => call($34, "test", [83]));

// table_init.wast:1906
assert_trap(() => call($34, "test", [84]));

// table_init.wast:1907
assert_trap(() => call($34, "test", [85]));

// table_init.wast:1908
assert_trap(() => call($34, "test", [86]));

// table_init.wast:1909
assert_trap(() => call($34, "test", [87]));

// table_init.wast:1910
assert_trap(() => call($34, "test", [88]));

// table_init.wast:1911
assert_trap(() => call($34, "test", [89]));

// table_init.wast:1912
assert_trap(() => call($34, "test", [90]));

// table_init.wast:1913
assert_trap(() => call($34, "test", [91]));

// table_init.wast:1914
assert_trap(() => call($34, "test", [92]));

// table_init.wast:1915
assert_trap(() => call($34, "test", [93]));

// table_init.wast:1916
assert_trap(() => call($34, "test", [94]));

// table_init.wast:1917
assert_trap(() => call($34, "test", [95]));

// table_init.wast:1918
assert_trap(() => call($34, "test", [96]));

// table_init.wast:1919
assert_trap(() => call($34, "test", [97]));

// table_init.wast:1920
assert_trap(() => call($34, "test", [98]));

// table_init.wast:1921
assert_trap(() => call($34, "test", [99]));

// table_init.wast:1922
assert_trap(() => call($34, "test", [100]));

// table_init.wast:1923
assert_trap(() => call($34, "test", [101]));

// table_init.wast:1924
assert_trap(() => call($34, "test", [102]));

// table_init.wast:1925
assert_trap(() => call($34, "test", [103]));

// table_init.wast:1926
assert_trap(() => call($34, "test", [104]));

// table_init.wast:1927
assert_trap(() => call($34, "test", [105]));

// table_init.wast:1928
assert_trap(() => call($34, "test", [106]));

// table_init.wast:1929
assert_trap(() => call($34, "test", [107]));

// table_init.wast:1930
assert_trap(() => call($34, "test", [108]));

// table_init.wast:1931
assert_trap(() => call($34, "test", [109]));

// table_init.wast:1932
assert_trap(() => call($34, "test", [110]));

// table_init.wast:1933
assert_trap(() => call($34, "test", [111]));

// table_init.wast:1934
assert_trap(() => call($34, "test", [112]));

// table_init.wast:1935
assert_trap(() => call($34, "test", [113]));

// table_init.wast:1936
assert_trap(() => call($34, "test", [114]));

// table_init.wast:1937
assert_trap(() => call($34, "test", [115]));

// table_init.wast:1938
assert_trap(() => call($34, "test", [116]));

// table_init.wast:1939
assert_trap(() => call($34, "test", [117]));

// table_init.wast:1940
assert_trap(() => call($34, "test", [118]));

// table_init.wast:1941
assert_trap(() => call($34, "test", [119]));

// table_init.wast:1942
assert_trap(() => call($34, "test", [120]));

// table_init.wast:1943
assert_trap(() => call($34, "test", [121]));

// table_init.wast:1944
assert_trap(() => call($34, "test", [122]));

// table_init.wast:1945
assert_trap(() => call($34, "test", [123]));

// table_init.wast:1946
assert_trap(() => call($34, "test", [124]));

// table_init.wast:1947
assert_trap(() => call($34, "test", [125]));

// table_init.wast:1948
assert_trap(() => call($34, "test", [126]));

// table_init.wast:1949
assert_trap(() => call($34, "test", [127]));

// table_init.wast:1950
assert_trap(() => call($34, "test", [128]));

// table_init.wast:1951
assert_trap(() => call($34, "test", [129]));

// table_init.wast:1952
assert_trap(() => call($34, "test", [130]));

// table_init.wast:1953
assert_trap(() => call($34, "test", [131]));

// table_init.wast:1954
assert_trap(() => call($34, "test", [132]));

// table_init.wast:1955
assert_trap(() => call($34, "test", [133]));

// table_init.wast:1956
assert_trap(() => call($34, "test", [134]));

// table_init.wast:1957
assert_trap(() => call($34, "test", [135]));

// table_init.wast:1958
assert_trap(() => call($34, "test", [136]));

// table_init.wast:1959
assert_trap(() => call($34, "test", [137]));

// table_init.wast:1960
assert_trap(() => call($34, "test", [138]));

// table_init.wast:1961
assert_trap(() => call($34, "test", [139]));

// table_init.wast:1962
assert_trap(() => call($34, "test", [140]));

// table_init.wast:1963
assert_trap(() => call($34, "test", [141]));

// table_init.wast:1964
assert_trap(() => call($34, "test", [142]));

// table_init.wast:1965
assert_trap(() => call($34, "test", [143]));

// table_init.wast:1966
assert_trap(() => call($34, "test", [144]));

// table_init.wast:1967
assert_trap(() => call($34, "test", [145]));

// table_init.wast:1968
assert_trap(() => call($34, "test", [146]));

// table_init.wast:1969
assert_trap(() => call($34, "test", [147]));

// table_init.wast:1970
assert_trap(() => call($34, "test", [148]));

// table_init.wast:1971
assert_trap(() => call($34, "test", [149]));

// table_init.wast:1972
assert_trap(() => call($34, "test", [150]));

// table_init.wast:1973
assert_trap(() => call($34, "test", [151]));

// table_init.wast:1974
assert_trap(() => call($34, "test", [152]));

// table_init.wast:1975
assert_trap(() => call($34, "test", [153]));

// table_init.wast:1976
assert_trap(() => call($34, "test", [154]));

// table_init.wast:1977
assert_trap(() => call($34, "test", [155]));

// table_init.wast:1978
assert_trap(() => call($34, "test", [156]));

// table_init.wast:1979
assert_trap(() => call($34, "test", [157]));

// table_init.wast:1980
assert_trap(() => call($34, "test", [158]));

// table_init.wast:1981
assert_trap(() => call($34, "test", [159]));

// table_init.wast:1983
let $$35 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8f\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x01\x7f\x01\x7f\x60\x02\x7f\x7f\x00\x03\x93\x80\x80\x80\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x04\x87\x80\x80\x80\x00\x01\x70\x01\xa0\x01\xc0\x02\x07\xe4\x80\x80\x80\x00\x12\x02\x66\x30\x00\x00\x02\x66\x31\x00\x01\x02\x66\x32\x00\x02\x02\x66\x33\x00\x03\x02\x66\x34\x00\x04\x02\x66\x35\x00\x05\x02\x66\x36\x00\x06\x02\x66\x37\x00\x07\x02\x66\x38\x00\x08\x02\x66\x39\x00\x09\x03\x66\x31\x30\x00\x0a\x03\x66\x31\x31\x00\x0b\x03\x66\x31\x32\x00\x0c\x03\x66\x31\x33\x00\x0d\x03\x66\x31\x34\x00\x0e\x03\x66\x31\x35\x00\x0f\x04\x74\x65\x73\x74\x00\x10\x03\x72\x75\x6e\x00\x11\x09\xb4\x80\x80\x80\x00\x01\x05\x70\x10\xd2\x00\x0b\xd2\x01\x0b\xd2\x02\x0b\xd2\x03\x0b\xd2\x04\x0b\xd2\x05\x0b\xd2\x06\x0b\xd2\x07\x0b\xd2\x08\x0b\xd2\x09\x0b\xd2\x0a\x0b\xd2\x0b\x0b\xd2\x0c\x0b\xd2\x0d\x0b\xd2\x0e\x0b\xd2\x0f\x0b\x0a\xae\x81\x80\x80\x00\x12\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x84\x80\x80\x80\x00\x00\x41\x0a\x0b\x84\x80\x80\x80\x00\x00\x41\x0b\x0b\x84\x80\x80\x80\x00\x00\x41\x0c\x0b\x84\x80\x80\x80\x00\x00\x41\x0d\x0b\x84\x80\x80\x80\x00\x00\x41\x0e\x0b\x84\x80\x80\x80\x00\x00\x41\x0f\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x41\x00\x20\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:1983
let $35 = instance($$35);

// table_init.wast:2011
assert_trap(() => call($35, "run", [97, 31]));

// table_init.wast:2012
assert_trap(() => call($35, "test", [0]));

// table_init.wast:2013
assert_trap(() => call($35, "test", [1]));

// table_init.wast:2014
assert_trap(() => call($35, "test", [2]));

// table_init.wast:2015
assert_trap(() => call($35, "test", [3]));

// table_init.wast:2016
assert_trap(() => call($35, "test", [4]));

// table_init.wast:2017
assert_trap(() => call($35, "test", [5]));

// table_init.wast:2018
assert_trap(() => call($35, "test", [6]));

// table_init.wast:2019
assert_trap(() => call($35, "test", [7]));

// table_init.wast:2020
assert_trap(() => call($35, "test", [8]));

// table_init.wast:2021
assert_trap(() => call($35, "test", [9]));

// table_init.wast:2022
assert_trap(() => call($35, "test", [10]));

// table_init.wast:2023
assert_trap(() => call($35, "test", [11]));

// table_init.wast:2024
assert_trap(() => call($35, "test", [12]));

// table_init.wast:2025
assert_trap(() => call($35, "test", [13]));

// table_init.wast:2026
assert_trap(() => call($35, "test", [14]));

// table_init.wast:2027
assert_trap(() => call($35, "test", [15]));

// table_init.wast:2028
assert_trap(() => call($35, "test", [16]));

// table_init.wast:2029
assert_trap(() => call($35, "test", [17]));

// table_init.wast:2030
assert_trap(() => call($35, "test", [18]));

// table_init.wast:2031
assert_trap(() => call($35, "test", [19]));

// table_init.wast:2032
assert_trap(() => call($35, "test", [20]));

// table_init.wast:2033
assert_trap(() => call($35, "test", [21]));

// table_init.wast:2034
assert_trap(() => call($35, "test", [22]));

// table_init.wast:2035
assert_trap(() => call($35, "test", [23]));

// table_init.wast:2036
assert_trap(() => call($35, "test", [24]));

// table_init.wast:2037
assert_trap(() => call($35, "test", [25]));

// table_init.wast:2038
assert_trap(() => call($35, "test", [26]));

// table_init.wast:2039
assert_trap(() => call($35, "test", [27]));

// table_init.wast:2040
assert_trap(() => call($35, "test", [28]));

// table_init.wast:2041
assert_trap(() => call($35, "test", [29]));

// table_init.wast:2042
assert_trap(() => call($35, "test", [30]));

// table_init.wast:2043
assert_trap(() => call($35, "test", [31]));

// table_init.wast:2044
assert_trap(() => call($35, "test", [32]));

// table_init.wast:2045
assert_trap(() => call($35, "test", [33]));

// table_init.wast:2046
assert_trap(() => call($35, "test", [34]));

// table_init.wast:2047
assert_trap(() => call($35, "test", [35]));

// table_init.wast:2048
assert_trap(() => call($35, "test", [36]));

// table_init.wast:2049
assert_trap(() => call($35, "test", [37]));

// table_init.wast:2050
assert_trap(() => call($35, "test", [38]));

// table_init.wast:2051
assert_trap(() => call($35, "test", [39]));

// table_init.wast:2052
assert_trap(() => call($35, "test", [40]));

// table_init.wast:2053
assert_trap(() => call($35, "test", [41]));

// table_init.wast:2054
assert_trap(() => call($35, "test", [42]));

// table_init.wast:2055
assert_trap(() => call($35, "test", [43]));

// table_init.wast:2056
assert_trap(() => call($35, "test", [44]));

// table_init.wast:2057
assert_trap(() => call($35, "test", [45]));

// table_init.wast:2058
assert_trap(() => call($35, "test", [46]));

// table_init.wast:2059
assert_trap(() => call($35, "test", [47]));

// table_init.wast:2060
assert_trap(() => call($35, "test", [48]));

// table_init.wast:2061
assert_trap(() => call($35, "test", [49]));

// table_init.wast:2062
assert_trap(() => call($35, "test", [50]));

// table_init.wast:2063
assert_trap(() => call($35, "test", [51]));

// table_init.wast:2064
assert_trap(() => call($35, "test", [52]));

// table_init.wast:2065
assert_trap(() => call($35, "test", [53]));

// table_init.wast:2066
assert_trap(() => call($35, "test", [54]));

// table_init.wast:2067
assert_trap(() => call($35, "test", [55]));

// table_init.wast:2068
assert_trap(() => call($35, "test", [56]));

// table_init.wast:2069
assert_trap(() => call($35, "test", [57]));

// table_init.wast:2070
assert_trap(() => call($35, "test", [58]));

// table_init.wast:2071
assert_trap(() => call($35, "test", [59]));

// table_init.wast:2072
assert_trap(() => call($35, "test", [60]));

// table_init.wast:2073
assert_trap(() => call($35, "test", [61]));

// table_init.wast:2074
assert_trap(() => call($35, "test", [62]));

// table_init.wast:2075
assert_trap(() => call($35, "test", [63]));

// table_init.wast:2076
assert_trap(() => call($35, "test", [64]));

// table_init.wast:2077
assert_trap(() => call($35, "test", [65]));

// table_init.wast:2078
assert_trap(() => call($35, "test", [66]));

// table_init.wast:2079
assert_trap(() => call($35, "test", [67]));

// table_init.wast:2080
assert_trap(() => call($35, "test", [68]));

// table_init.wast:2081
assert_trap(() => call($35, "test", [69]));

// table_init.wast:2082
assert_trap(() => call($35, "test", [70]));

// table_init.wast:2083
assert_trap(() => call($35, "test", [71]));

// table_init.wast:2084
assert_trap(() => call($35, "test", [72]));

// table_init.wast:2085
assert_trap(() => call($35, "test", [73]));

// table_init.wast:2086
assert_trap(() => call($35, "test", [74]));

// table_init.wast:2087
assert_trap(() => call($35, "test", [75]));

// table_init.wast:2088
assert_trap(() => call($35, "test", [76]));

// table_init.wast:2089
assert_trap(() => call($35, "test", [77]));

// table_init.wast:2090
assert_trap(() => call($35, "test", [78]));

// table_init.wast:2091
assert_trap(() => call($35, "test", [79]));

// table_init.wast:2092
assert_trap(() => call($35, "test", [80]));

// table_init.wast:2093
assert_trap(() => call($35, "test", [81]));

// table_init.wast:2094
assert_trap(() => call($35, "test", [82]));

// table_init.wast:2095
assert_trap(() => call($35, "test", [83]));

// table_init.wast:2096
assert_trap(() => call($35, "test", [84]));

// table_init.wast:2097
assert_trap(() => call($35, "test", [85]));

// table_init.wast:2098
assert_trap(() => call($35, "test", [86]));

// table_init.wast:2099
assert_trap(() => call($35, "test", [87]));

// table_init.wast:2100
assert_trap(() => call($35, "test", [88]));

// table_init.wast:2101
assert_trap(() => call($35, "test", [89]));

// table_init.wast:2102
assert_trap(() => call($35, "test", [90]));

// table_init.wast:2103
assert_trap(() => call($35, "test", [91]));

// table_init.wast:2104
assert_trap(() => call($35, "test", [92]));

// table_init.wast:2105
assert_trap(() => call($35, "test", [93]));

// table_init.wast:2106
assert_trap(() => call($35, "test", [94]));

// table_init.wast:2107
assert_trap(() => call($35, "test", [95]));

// table_init.wast:2108
assert_trap(() => call($35, "test", [96]));

// table_init.wast:2109
assert_trap(() => call($35, "test", [97]));

// table_init.wast:2110
assert_trap(() => call($35, "test", [98]));

// table_init.wast:2111
assert_trap(() => call($35, "test", [99]));

// table_init.wast:2112
assert_trap(() => call($35, "test", [100]));

// table_init.wast:2113
assert_trap(() => call($35, "test", [101]));

// table_init.wast:2114
assert_trap(() => call($35, "test", [102]));

// table_init.wast:2115
assert_trap(() => call($35, "test", [103]));

// table_init.wast:2116
assert_trap(() => call($35, "test", [104]));

// table_init.wast:2117
assert_trap(() => call($35, "test", [105]));

// table_init.wast:2118
assert_trap(() => call($35, "test", [106]));

// table_init.wast:2119
assert_trap(() => call($35, "test", [107]));

// table_init.wast:2120
assert_trap(() => call($35, "test", [108]));

// table_init.wast:2121
assert_trap(() => call($35, "test", [109]));

// table_init.wast:2122
assert_trap(() => call($35, "test", [110]));

// table_init.wast:2123
assert_trap(() => call($35, "test", [111]));

// table_init.wast:2124
assert_trap(() => call($35, "test", [112]));

// table_init.wast:2125
assert_trap(() => call($35, "test", [113]));

// table_init.wast:2126
assert_trap(() => call($35, "test", [114]));

// table_init.wast:2127
assert_trap(() => call($35, "test", [115]));

// table_init.wast:2128
assert_trap(() => call($35, "test", [116]));

// table_init.wast:2129
assert_trap(() => call($35, "test", [117]));

// table_init.wast:2130
assert_trap(() => call($35, "test", [118]));

// table_init.wast:2131
assert_trap(() => call($35, "test", [119]));

// table_init.wast:2132
assert_trap(() => call($35, "test", [120]));

// table_init.wast:2133
assert_trap(() => call($35, "test", [121]));

// table_init.wast:2134
assert_trap(() => call($35, "test", [122]));

// table_init.wast:2135
assert_trap(() => call($35, "test", [123]));

// table_init.wast:2136
assert_trap(() => call($35, "test", [124]));

// table_init.wast:2137
assert_trap(() => call($35, "test", [125]));

// table_init.wast:2138
assert_trap(() => call($35, "test", [126]));

// table_init.wast:2139
assert_trap(() => call($35, "test", [127]));

// table_init.wast:2140
assert_trap(() => call($35, "test", [128]));

// table_init.wast:2141
assert_trap(() => call($35, "test", [129]));

// table_init.wast:2142
assert_trap(() => call($35, "test", [130]));

// table_init.wast:2143
assert_trap(() => call($35, "test", [131]));

// table_init.wast:2144
assert_trap(() => call($35, "test", [132]));

// table_init.wast:2145
assert_trap(() => call($35, "test", [133]));

// table_init.wast:2146
assert_trap(() => call($35, "test", [134]));

// table_init.wast:2147
assert_trap(() => call($35, "test", [135]));

// table_init.wast:2148
assert_trap(() => call($35, "test", [136]));

// table_init.wast:2149
assert_trap(() => call($35, "test", [137]));

// table_init.wast:2150
assert_trap(() => call($35, "test", [138]));

// table_init.wast:2151
assert_trap(() => call($35, "test", [139]));

// table_init.wast:2152
assert_trap(() => call($35, "test", [140]));

// table_init.wast:2153
assert_trap(() => call($35, "test", [141]));

// table_init.wast:2154
assert_trap(() => call($35, "test", [142]));

// table_init.wast:2155
assert_trap(() => call($35, "test", [143]));

// table_init.wast:2156
assert_trap(() => call($35, "test", [144]));

// table_init.wast:2157
assert_trap(() => call($35, "test", [145]));

// table_init.wast:2158
assert_trap(() => call($35, "test", [146]));

// table_init.wast:2159
assert_trap(() => call($35, "test", [147]));

// table_init.wast:2160
assert_trap(() => call($35, "test", [148]));

// table_init.wast:2161
assert_trap(() => call($35, "test", [149]));

// table_init.wast:2162
assert_trap(() => call($35, "test", [150]));

// table_init.wast:2163
assert_trap(() => call($35, "test", [151]));

// table_init.wast:2164
assert_trap(() => call($35, "test", [152]));

// table_init.wast:2165
assert_trap(() => call($35, "test", [153]));

// table_init.wast:2166
assert_trap(() => call($35, "test", [154]));

// table_init.wast:2167
assert_trap(() => call($35, "test", [155]));

// table_init.wast:2168
assert_trap(() => call($35, "test", [156]));

// table_init.wast:2169
assert_trap(() => call($35, "test", [157]));

// table_init.wast:2170
assert_trap(() => call($35, "test", [158]));

// table_init.wast:2171
assert_trap(() => call($35, "test", [159]));

// table_init.wast:2173
let $$36 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8f\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x01\x7f\x01\x7f\x60\x02\x7f\x7f\x00\x03\x93\x80\x80\x80\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x04\x85\x80\x80\x80\x00\x01\x70\x01\x40\x40\x07\xe4\x80\x80\x80\x00\x12\x02\x66\x30\x00\x00\x02\x66\x31\x00\x01\x02\x66\x32\x00\x02\x02\x66\x33\x00\x03\x02\x66\x34\x00\x04\x02\x66\x35\x00\x05\x02\x66\x36\x00\x06\x02\x66\x37\x00\x07\x02\x66\x38\x00\x08\x02\x66\x39\x00\x09\x03\x66\x31\x30\x00\x0a\x03\x66\x31\x31\x00\x0b\x03\x66\x31\x32\x00\x0c\x03\x66\x31\x33\x00\x0d\x03\x66\x31\x34\x00\x0e\x03\x66\x31\x35\x00\x0f\x04\x74\x65\x73\x74\x00\x10\x03\x72\x75\x6e\x00\x11\x09\xb4\x80\x80\x80\x00\x01\x05\x70\x10\xd2\x00\x0b\xd2\x01\x0b\xd2\x02\x0b\xd2\x03\x0b\xd2\x04\x0b\xd2\x05\x0b\xd2\x06\x0b\xd2\x07\x0b\xd2\x08\x0b\xd2\x09\x0b\xd2\x0a\x0b\xd2\x0b\x0b\xd2\x0c\x0b\xd2\x0d\x0b\xd2\x0e\x0b\xd2\x0f\x0b\x0a\xae\x81\x80\x80\x00\x12\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x84\x80\x80\x80\x00\x00\x41\x0a\x0b\x84\x80\x80\x80\x00\x00\x41\x0b\x0b\x84\x80\x80\x80\x00\x00\x41\x0c\x0b\x84\x80\x80\x80\x00\x00\x41\x0d\x0b\x84\x80\x80\x80\x00\x00\x41\x0e\x0b\x84\x80\x80\x80\x00\x00\x41\x0f\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x41\x00\x20\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:2173
let $36 = instance($$36);

// table_init.wast:2201
assert_trap(() => call($36, "run", [48, -16]));

// table_init.wast:2202
assert_trap(() => call($36, "test", [0]));

// table_init.wast:2203
assert_trap(() => call($36, "test", [1]));

// table_init.wast:2204
assert_trap(() => call($36, "test", [2]));

// table_init.wast:2205
assert_trap(() => call($36, "test", [3]));

// table_init.wast:2206
assert_trap(() => call($36, "test", [4]));

// table_init.wast:2207
assert_trap(() => call($36, "test", [5]));

// table_init.wast:2208
assert_trap(() => call($36, "test", [6]));

// table_init.wast:2209
assert_trap(() => call($36, "test", [7]));

// table_init.wast:2210
assert_trap(() => call($36, "test", [8]));

// table_init.wast:2211
assert_trap(() => call($36, "test", [9]));

// table_init.wast:2212
assert_trap(() => call($36, "test", [10]));

// table_init.wast:2213
assert_trap(() => call($36, "test", [11]));

// table_init.wast:2214
assert_trap(() => call($36, "test", [12]));

// table_init.wast:2215
assert_trap(() => call($36, "test", [13]));

// table_init.wast:2216
assert_trap(() => call($36, "test", [14]));

// table_init.wast:2217
assert_trap(() => call($36, "test", [15]));

// table_init.wast:2218
assert_trap(() => call($36, "test", [16]));

// table_init.wast:2219
assert_trap(() => call($36, "test", [17]));

// table_init.wast:2220
assert_trap(() => call($36, "test", [18]));

// table_init.wast:2221
assert_trap(() => call($36, "test", [19]));

// table_init.wast:2222
assert_trap(() => call($36, "test", [20]));

// table_init.wast:2223
assert_trap(() => call($36, "test", [21]));

// table_init.wast:2224
assert_trap(() => call($36, "test", [22]));

// table_init.wast:2225
assert_trap(() => call($36, "test", [23]));

// table_init.wast:2226
assert_trap(() => call($36, "test", [24]));

// table_init.wast:2227
assert_trap(() => call($36, "test", [25]));

// table_init.wast:2228
assert_trap(() => call($36, "test", [26]));

// table_init.wast:2229
assert_trap(() => call($36, "test", [27]));

// table_init.wast:2230
assert_trap(() => call($36, "test", [28]));

// table_init.wast:2231
assert_trap(() => call($36, "test", [29]));

// table_init.wast:2232
assert_trap(() => call($36, "test", [30]));

// table_init.wast:2233
assert_trap(() => call($36, "test", [31]));

// table_init.wast:2234
assert_trap(() => call($36, "test", [32]));

// table_init.wast:2235
assert_trap(() => call($36, "test", [33]));

// table_init.wast:2236
assert_trap(() => call($36, "test", [34]));

// table_init.wast:2237
assert_trap(() => call($36, "test", [35]));

// table_init.wast:2238
assert_trap(() => call($36, "test", [36]));

// table_init.wast:2239
assert_trap(() => call($36, "test", [37]));

// table_init.wast:2240
assert_trap(() => call($36, "test", [38]));

// table_init.wast:2241
assert_trap(() => call($36, "test", [39]));

// table_init.wast:2242
assert_trap(() => call($36, "test", [40]));

// table_init.wast:2243
assert_trap(() => call($36, "test", [41]));

// table_init.wast:2244
assert_trap(() => call($36, "test", [42]));

// table_init.wast:2245
assert_trap(() => call($36, "test", [43]));

// table_init.wast:2246
assert_trap(() => call($36, "test", [44]));

// table_init.wast:2247
assert_trap(() => call($36, "test", [45]));

// table_init.wast:2248
assert_trap(() => call($36, "test", [46]));

// table_init.wast:2249
assert_trap(() => call($36, "test", [47]));

// table_init.wast:2250
assert_trap(() => call($36, "test", [48]));

// table_init.wast:2251
assert_trap(() => call($36, "test", [49]));

// table_init.wast:2252
assert_trap(() => call($36, "test", [50]));

// table_init.wast:2253
assert_trap(() => call($36, "test", [51]));

// table_init.wast:2254
assert_trap(() => call($36, "test", [52]));

// table_init.wast:2255
assert_trap(() => call($36, "test", [53]));

// table_init.wast:2256
assert_trap(() => call($36, "test", [54]));

// table_init.wast:2257
assert_trap(() => call($36, "test", [55]));

// table_init.wast:2258
assert_trap(() => call($36, "test", [56]));

// table_init.wast:2259
assert_trap(() => call($36, "test", [57]));

// table_init.wast:2260
assert_trap(() => call($36, "test", [58]));

// table_init.wast:2261
assert_trap(() => call($36, "test", [59]));

// table_init.wast:2262
assert_trap(() => call($36, "test", [60]));

// table_init.wast:2263
assert_trap(() => call($36, "test", [61]));

// table_init.wast:2264
assert_trap(() => call($36, "test", [62]));

// table_init.wast:2265
assert_trap(() => call($36, "test", [63]));

// table_init.wast:2267
let $$37 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8f\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x01\x7f\x01\x7f\x60\x02\x7f\x7f\x00\x03\x93\x80\x80\x80\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x04\x85\x80\x80\x80\x00\x01\x70\x01\x10\x10\x07\xe4\x80\x80\x80\x00\x12\x02\x66\x30\x00\x00\x02\x66\x31\x00\x01\x02\x66\x32\x00\x02\x02\x66\x33\x00\x03\x02\x66\x34\x00\x04\x02\x66\x35\x00\x05\x02\x66\x36\x00\x06\x02\x66\x37\x00\x07\x02\x66\x38\x00\x08\x02\x66\x39\x00\x09\x03\x66\x31\x30\x00\x0a\x03\x66\x31\x31\x00\x0b\x03\x66\x31\x32\x00\x0c\x03\x66\x31\x33\x00\x0d\x03\x66\x31\x34\x00\x0e\x03\x66\x31\x35\x00\x0f\x04\x74\x65\x73\x74\x00\x10\x03\x72\x75\x6e\x00\x11\x09\xb4\x80\x80\x80\x00\x01\x05\x70\x10\xd2\x00\x0b\xd2\x01\x0b\xd2\x02\x0b\xd2\x03\x0b\xd2\x04\x0b\xd2\x05\x0b\xd2\x06\x0b\xd2\x07\x0b\xd2\x08\x0b\xd2\x09\x0b\xd2\x0a\x0b\xd2\x0b\x0b\xd2\x0c\x0b\xd2\x0d\x0b\xd2\x0e\x0b\xd2\x0f\x0b\x0a\xae\x81\x80\x80\x00\x12\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x84\x80\x80\x80\x00\x00\x41\x0a\x0b\x84\x80\x80\x80\x00\x00\x41\x0b\x0b\x84\x80\x80\x80\x00\x00\x41\x0c\x0b\x84\x80\x80\x80\x00\x00\x41\x0d\x0b\x84\x80\x80\x80\x00\x00\x41\x0e\x0b\x84\x80\x80\x80\x00\x00\x41\x0f\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x41\x08\x20\x01\xfc\x0c\x00\x00\x0b");

// table_init.wast:2267
let $37 = instance($$37);

// table_init.wast:2295
assert_trap(() => call($37, "run", [0, -4]));

// table_init.wast:2296
assert_trap(() => call($37, "test", [0]));

// table_init.wast:2297
assert_trap(() => call($37, "test", [1]));

// table_init.wast:2298
assert_trap(() => call($37, "test", [2]));

// table_init.wast:2299
assert_trap(() => call($37, "test", [3]));

// table_init.wast:2300
assert_trap(() => call($37, "test", [4]));

// table_init.wast:2301
assert_trap(() => call($37, "test", [5]));

// table_init.wast:2302
assert_trap(() => call($37, "test", [6]));

// table_init.wast:2303
assert_trap(() => call($37, "test", [7]));

// table_init.wast:2304
assert_trap(() => call($37, "test", [8]));

// table_init.wast:2305
assert_trap(() => call($37, "test", [9]));

// table_init.wast:2306
assert_trap(() => call($37, "test", [10]));

// table_init.wast:2307
assert_trap(() => call($37, "test", [11]));

// table_init.wast:2308
assert_trap(() => call($37, "test", [12]));

// table_init.wast:2309
assert_trap(() => call($37, "test", [13]));

// table_init.wast:2310
assert_trap(() => call($37, "test", [14]));

// table_init.wast:2311
assert_trap(() => call($37, "test", [15]));

// table_init.wast:2313
let $$38 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x01\x09\xc4\x81\x80\x80\x00\x41\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x41\x00\x41\x00\x41\x00\xfc\x0c\x40\x00\x0b");

// table_init.wast:2313
let $38 = instance($$38);
