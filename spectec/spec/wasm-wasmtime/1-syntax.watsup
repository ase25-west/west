;;
;; Profiles
;;

def $ND : bool  ;; non-determinism


;;
;; Values
;;

;; Integers

syntax bit hint(desc "bit") = 0 | 1
syntax byte hint(desc "byte") = 0x00 | ... | 0xFF

syntax uN(N) hint(desc "unsigned integer") hint(show u#%) hint(macro "uNX") =
  0 | ... | $nat$(2^N-1)
syntax sN(N) hint(desc "signed integer") hint(show s#%) hint(macro "sNX") =
  -2^(N-1) | ... | -1 | 0 | +1 | ... | 2^(N-1)-1
syntax iN(N) hint(desc "integer") hint(show i#%) hint(macro "iNX") =
  uN(N)

syntax u8 = uN(8)
syntax u16 = uN(16)
syntax u31 = uN(31)
syntax u32 = uN(32)
syntax u64 = uN(64)
syntax u128 = uN(128)
syntax s33 = sN(33)

var b : byte


;; Floating-point

def $signif(N) : nat
def $signif(32) = 23
def $signif(64) = 52

def $expon(N) : nat
def $expon(32) = 8
def $expon(64) = 11

def $M(N) : nat hint(show `M) hint(macro none)
def $M(N) = $signif(N)

def $E(N) : nat hint(show `E) hint(macro none)
def $E(N) = $expon(N)

syntax fN(N) hint(desc "floating-point number") hint(show f#%) hint(macro "fNX") =
  | POS fNmag(N)  hint(show $(+%)) \
  | NEG fNmag(N)  hint(show $(-%))

syntax exp hint(show e) hint(macro none) = int
syntax fNmag(N) hint(desc "floating-point magnitude") hint(show fNmag) =
  | NORM m exp   hint(show $((1 + %*2^(-$M(N))) * 2^%))   -- if $(m < 2^$M(N) /\ 2-2^($E(N)-1) <= exp <= 2^($E(N)-1)-1)
  | SUBNORM m    hint(show $((0 + %*2^(-$M(N))) * 2^exp)) -- if $(m < 2^$M(N) /\ 2-2^($E(N)-1) = exp)
  | INF          hint(show infinity)
  | NAN (m)      hint(show NAN#(%))                       -- if $(1 <= m < 2^$M(N))

syntax f32 = fN(32)
syntax f64 = fN(64)

def $fzero(N) : fN(N) hint(show $(+0))
def $fzero(N) = POS (SUBNORM 0)

def $fone(N) : fN(N)  hint(show $(+1))
def $fone(N) = POS (NORM 1 0)

def $canon_(N) : nat
def $canon_(N) = $(2^($signif(N)-1))


;; Vectors

syntax vN(N) hint(desc "vector") hint(show v#%) hint(macro "vNX") =
  uN(N)

syntax v128 = vN(128)


;;
;; Lists
;;

;; TODO(3, rossberg): enable writing X^n
syntax list(syntax X) = X*  -- if |X*| < $(2^32)


;;
;; Names
;;

syntax char hint(desc "character") = U+0000 | ... | U+D7FF | U+E000 | ... | U+10FFFF

def $utf8(char*) : byte*

syntax name hint(desc "name") = char*  -- if |$utf8(char*)| < $(2^32)

var nm : name


;;
;; Indices
;;

syntax idx hint(desc "index") = u8
syntax laneidx hint(desc "lane index") = u8

syntax typeidx hint(desc "type index") = idx
syntax funcidx hint(desc "function index") = idx
syntax globalidx hint(desc "global index") = idx
syntax tableidx hint(desc "table index") = idx
syntax memidx hint(desc "memory index") = idx
syntax tagidx hint(desc "tag index") = idx
syntax elemidx hint(desc "elem index") = idx
syntax dataidx hint(desc "data index") = idx
syntax labelidx hint(desc "label index") = idx
syntax localidx hint(desc "local index") = idx
syntax fieldidx hint(desc "field index") = idx

syntax externidx hint(desc "external index") hint(macro "%" "XX%") =
  | FUNC funcidx | GLOBAL globalidx | TABLE tableidx | MEM memidx | TAG tagidx

var x : idx
var y : idx
var l : labelidx
var xx : externidx
var x33 : s33 hint(show x)


;;
;; Types
;;

;; Value types

;; TODO(3, rossberg): add ability to do this inline
syntax nul hint(show NULL?) hint(macro "%" "%") = NULL?
syntax nul1 hint(show NULL#$_(1)?) hint(macro "%" "%") = NULL?  ;; HACK
syntax nul2 hint(show NULL#$_(2)?) hint(macro "%" "%") = NULL?  ;; HACK

syntax addrtype hint(desc "address type") =
  | I32 | I64

syntax numtype hint(desc "number type") =
  | I32 | I64 | F32 | F64

syntax vectype hint(desc "vector type") =
  | V128

syntax consttype hint(desc "literal type") =
  | numtype | vectype

syntax absheaptype/syn hint(desc "abstract heap type") =
  | ANY | EQ hint(macro "EQT") | I31 | STRUCT | ARRAY | NONE
  | FUNC hint(macro "FUNCT") | NOFUNC
  | EXTERN | NOEXTERN
  | ...
syntax absheaptype/sem =
  | ... | BOT

syntax rectype hint(desc "recursive type")  ;; forward decl
syntax deftype hint(desc "defined type") =
  | DEF rectype n hint(show %.%)

syntax typeuse/syn hint(desc "type use") =
  | _IDX typeidx | ...
syntax typeuse/sem =
  | ... | deftype | REC n

syntax typevar hint(desc "type variable") =
  | _IDX typeidx | REC nat

syntax heaptype hint(desc "heap type") =
  | absheaptype | typeuse

syntax reftype hint(desc "reference type") =
  | REF nul heaptype

syntax valtype/syn hint(desc "value type") =
  | numtype | vectype | reftype | ...
syntax valtype/sem =
  | ... | BOT

syntax Inn hint(show I#N) hint(macro "nt%") = I32 | I64
syntax Fnn hint(show F#N) hint(macro "nt%") = F32 | F64
syntax Vnn hint(show V#N) hint(macro "nt%") = V128
syntax Cnn hint(show t) = Inn | Fnn | Vnn


def $ANYREF    : reftype hint(show ANYREF)
def $EQREF     : reftype hint(show EQREF)
def $I31REF    : reftype hint(show I31REF)
def $STRUCTREF : reftype hint(show STRUCTREF)
def $ARRAYREF  : reftype hint(show ARRAYREF)
def $FUNCREF   : reftype hint(show FUNCREF)
def $EXNREF    : reftype hint(show EXNREF)
def $EXTERNREF : reftype hint(show EXTERNREF)
def $NULLREF   : reftype hint(show NULLREF)
def $NULLFUNCREF : reftype hint(show NULLFUNCREF)
def $NULLEXNREF  : reftype hint(show NULLEXNREF)
def $NULLEXTERNREF : reftype hint(show NULLEXTERNREF)

def $ANYREF    = (REF NULL ANY)
def $EQREF     = (REF NULL EQ)
def $I31REF    = (REF NULL I31)
def $STRUCTREF = (REF NULL STRUCT)
def $ARRAYREF  = (REF NULL ARRAY)
def $FUNCREF   = (REF NULL FUNC)
def $EXNREF    = (REF NULL EXTERN)
def $EXTERNREF = (REF NULL EXTERN)
def $NULLREF   = (REF NULL NONE)
def $NULLFUNCREF = (REF NULL NOFUNC)
def $NULLEXTERNREF = (REF NULL NOEXTERN)


;; Packed types

syntax packtype hint(desc "packed type") = I8 | I16
syntax lanetype hint(desc "lane type") = numtype | packtype
syntax storagetype hint(desc "storage type") = valtype | packtype

syntax Pnn hint(show I#N) hint(macro "nt%") = I8 | I16
syntax Jnn hint(show I#N) hint(macro "nt%") = Inn | Pnn
syntax Lnn hint(show I#N) hint(macro "nt%") = Inn | Fnn | Pnn


;; Result types

syntax resulttype hint(desc "result type") =
  list(valtype)


;; Type definitions

;; TODO(3, rossberg): add ability to do this inline
syntax mut hint(show MUT?)   hint(macro "T%" "T%") = MUT?
;; HACK
syntax mut1 hint(show MUT#$_(1)?) hint(macro "T%" "T%") = MUT?
syntax mut2 hint(show MUT#$_(2)?) hint(macro "T%" "T%") = MUT?
syntax fin hint(show FINAL?) hint(macro "T%" "T%") = FINAL?

syntax fieldtype  hint(desc "field type") = mut storagetype

syntax functype   hint(desc "function type") = resulttype -> resulttype hint(macro "toF")
syntax structtype hint(desc "structure type") = list(fieldtype)
syntax arraytype  hint(desc "array type") = fieldtype

syntax comptype hint(desc "composite type") hint(macro "%" "T%") =
  | STRUCT structtype
  | ARRAY arraytype
  | FUNC functype

syntax subtype hint(desc "sub type") hint(macro "%" "T%") =
  | SUB fin typeuse* comptype

syntax rectype hint(desc "recursive type") hint(macro "%" "T%") =
  | REC list(subtype)


;; External types

syntax limits hint(desc "limits") = `[u64 .. u64] hint(macro "L%")

syntax globaltype hint(desc "global type") = mut valtype
syntax tabletype hint(desc "table type") = addrtype limits reftype
syntax memtype hint(desc "memory type") = addrtype limits PAGE
syntax tagtype hint(desc "tag type") = deftype
syntax elemtype hint(desc "element type") = reftype
syntax datatype hint(desc "data type") = OK hint(macro "%data")

syntax externtype hint(desc "external type") hint(macro "%" "XT%") =
  | FUNC typeuse | GLOBAL globaltype | TABLE tabletype | MEM memtype | TAG typeuse

syntax moduletype hint(desc "module type") =
  externtype* -> externtype* hint(macro "toM")


;; Meta variables

var lim : limits

var t : valtype
var at : addrtype
;; var bt : blocktype  ;; defined below
var ct : comptype
var dt : deftype
var et : elemtype
var ft : functype
var gt : globaltype
var ht : heaptype
;; var it : instrtype  ;; defined in typing
var jt : tagtype
;; var kt : conttype   ;; future extension
var lt : lanetype
var mt : memtype
var nt : numtype
var pt : packtype
var rt : reftype
var st : subtype
var tt : tabletype
var vt : vectype
var xt : externtype
var yt : fieldtype
var zt : storagetype
var ok : datatype

var tv : typevar
var yy : typeuse hint(show y)
var tu : typeuse


;; Type sizes

;; def |I n| = |F n| = |V n| = n        ;; TODO(2, rossberg): show this?

def $size(numtype) : nat       hint(show |%|)
def $vsize(vectype) : nat      hint(show |%|)
def $psize(packtype) : nat     hint(show |%|)
def $lsize(lanetype) : nat     hint(show |%|)
def $zsize(storagetype) : nat  hint(show |%|)

def $size(I32) = 32
def $size(I64) = 64
def $size(F32) = 32
def $size(F64) = 64

def $vsize(V128) = 128

def $psize(I8) = 8
def $psize(I16) = 16

def $lsize(numtype) = $size(numtype)
def $lsize(packtype) = $psize(packtype)

def $zsize(numtype) = $size(numtype)
def $zsize(vectype) = $vsize(vectype)
def $zsize(packtype) = $psize(packtype)

;; TODO(2, rossberg): get rid of these terrible hacks by defining $Inn(nat) hint(show I#%)
def $sizenn(numtype) : nat     hint(show N)   hint(macro none)  ;; HACK!
def $sizenn1(numtype) : nat    hint(show N_1) hint(macro none)  ;; HACK!
def $sizenn2(numtype) : nat    hint(show N_2) hint(macro none)  ;; HACK!
def $sizenn(nt) = $size(nt)
def $sizenn1(nt) = $size(nt)
def $sizenn2(nt) = $size(nt)

def $vsizenn(vectype) : nat    hint(show N)   hint(macro none)  ;; HACK!
def $vsizenn(vt) = $vsize(vt)

def $psizenn(packtype) : nat   hint(show N)   hint(macro none)  ;; HACK!
def $psizenn(pt) = $psize(pt)

def $lsizenn(lanetype) : nat   hint(show N)   hint(macro none)  ;; HACK!
def $lsizenn1(lanetype) : nat  hint(show N_1) hint(macro none)  ;; HACK!
def $lsizenn2(lanetype) : nat  hint(show N_2) hint(macro none)  ;; HACK!
def $lsizenn(lt) = $lsize(lt)
def $lsizenn1(lt) = $lsize(lt)
def $lsizenn2(lt) = $lsize(lt)


;; Type unpacking

def $lunpack(lanetype) : numtype  hint(show $unpack(%))
def $lunpack(numtype) = numtype
def $lunpack(packtype) = I32

def $unpack(storagetype) : valtype
def $unpack(valtype) = valtype
def $unpack(packtype) = I32

def $nunpack(storagetype) : numtype  hint(show $unpack(%)) hint(partial)
def $nunpack(numtype) = numtype
def $nunpack(packtype) = I32

def $vunpack(storagetype) : vectype  hint(show $unpack(%)) hint(partial)
def $vunpack(vectype) = vectype

def $cunpack(storagetype) : consttype hint(show $unpack(%)) hint(partial)
def $cunpack(consttype) = consttype
def $cunpack(packtype) = I32
def $cunpack(lanetype) = $lunpack(lanetype)  ;; HACK


;;
;; Instructions
;;

;; Constants

syntax num_(numtype)
syntax num_(Inn) = iN($sizenn(Inn))
syntax num_(Fnn) = fN($sizenn(Fnn))

syntax pack_(Pnn) = iN($psizenn(Pnn))

syntax lane_(lanetype)
syntax lane_(numtype) = num_(numtype)
syntax lane_(packtype) = pack_(packtype)
syntax lane_(Jnn) = iN($lsize(Jnn))  ;; HACK

syntax vec_(Vnn) = vN($vsize(Vnn))

syntax lit_(storagetype)
syntax lit_(numtype) = num_(numtype)
syntax lit_(vectype) = vec_(vectype)
syntax lit_(packtype) = pack_(packtype)


;; Numeric operators

syntax sz hint(desc "pack size") = `8 | `16 | `32 | `64
syntax sx hint(desc "signedness") = U | S

syntax unop_(numtype)
syntax unop_(Inn) = CLZ | CTZ | POPCNT | EXTEND sz hint(show EXTEND#%#_#S) -- if $(sz < $sizenn(Inn))
syntax unop_(Fnn) = ABS | NEG | SQRT | CEIL | FLOOR | TRUNC | NEAREST

syntax binop_(numtype)
syntax binop_(Inn) =
  | ADD | SUB | MUL | DIV sx hint(show DIV#_#%) | REM sx hint(show REM#_#%)
  | AND | OR | XOR | SHL | SHR sx hint(show SHR#_#%) | ROTL | ROTR
syntax binop_(Fnn) =
  | ADD | SUB | MUL | DIV | MIN hint(macro "FMIN") | MAX hint(macro "FMAX") | COPYSIGN

syntax testop_(numtype)
syntax testop_(Inn) = EQZ
;; syntax testop_(Fnn) = |      ;; uninhabited

syntax relop_(numtype)
syntax relop_(Inn) =
  | EQ | NE \
  | LT sx hint(show LT#_#%) | GT sx hint(show GT#_#%) \
  | LE sx hint(show LE#_#%) | GE sx hint(show GE#_#%)
syntax relop_(Fnn) =
  | EQ | NE | LT | GT | LE | GE

;; TODO(3, rossberg): change order of parameters?
syntax cvtop__(numtype_1, numtype_2)
syntax cvtop__(Inn_1, Inn_2) =
  | EXTEND sx hint(show %0#_#%1)  -- if $sizenn1(Inn_1) < $sizenn2(Inn_2)
  | WRAP         -- if $sizenn1(Inn_1) > $sizenn2(Inn_2)
syntax cvtop__(Inn_1, Fnn_2) =
  | CONVERT sx hint(show %0#_#%1)
  | REINTERPRET  -- if $sizenn1(Inn_1) = $sizenn2(Fnn_2)
syntax cvtop__(Fnn_1, Inn_2) =
  | TRUNC sx hint(show %0#_#%1)
  | TRUNC_SAT sx hint(show %0#_#%1)
  | REINTERPRET  -- if $sizenn1(Fnn_1) = $sizenn2(Inn_2)
syntax cvtop__(Fnn_1, Fnn_2) =
  | PROMOTE      -- if $sizenn1(Fnn_1) < $sizenn2(Fnn_2)
  | DEMOTE       -- if $sizenn1(Fnn_1) > $sizenn2(Fnn_2)


;; Vector shapes

syntax dim hint(desc "dimension") = `1 | `2 | `4 | `8 | `16
syntax shape hint(desc "shape") = lanetype X dim  hint(show %0#X#%2) hint(macro "%shape")
  -- if $($lsize(lanetype) * dim = 128)


def $dim(shape) : dim  hint(macro "shdim")
def $dim(Lnn X N) = N

def $lanetype(shape) : lanetype  hint(macro "shlanetype")
def $lanetype(Lnn X N) = Lnn

def $unpackshape(shape) : numtype  hint(show $unpack(%))
def $unpackshape(Lnn X N) = $lunpack(Lnn)


syntax ishape hint(desc "integer shape") = shape -- if $lanetype(shape) = Jnn
syntax bshape hint(desc "byte shape") = shape    -- if $lanetype(shape) = I8


;; Vector operators

syntax half__(shape_1, shape_2)
syntax half__(Jnn_1 X M_1, Jnn_2 X M_2) = LOW | HIGH  -- if $(2 * $lsizenn1(Jnn_1)) = $lsizenn2(Jnn_2)
syntax half__(Lnn_1 X M_1, Fnn_2 X M_2) = LOW         -- if $(2 * $lsizenn1(Lnn_1)) = $sizenn2(Fnn_2) = 64

syntax zero__(shape_1, shape_2)
syntax zero__(Fnn_1 X M_1, Lnn_2 X M_2) = ZERO -- if $(2 * $lsizenn2(Lnn_2)) = $sizenn1(Fnn_1) = 64

syntax vvunop hint(macro "%" "V%") = NOT
syntax vvbinop hint(macro "%" "V%") = AND | ANDNOT | OR | XOR
syntax vvternop hint(macro "%" "V%") = BITSELECT
syntax vvtestop hint(macro "%" "V%") = ANY_TRUE

syntax vunop_(shape) hint(macro "%" "V%")
syntax vunop_(Jnn X M) = ABS | NEG
  | POPCNT -- if $lsizenn(Jnn) = `8
syntax vunop_(Fnn X M) = ABS | NEG | SQRT | CEIL | FLOOR | TRUNC | NEAREST

syntax vbinop_(shape) hint(macro "%" "V%")
syntax vbinop_(Jnn X M) =
  | ADD
  | SUB
  | ADD_SAT sx hint(show ADD_SAT#_#%)        -- if $lsizenn(Jnn) <= `16
  | SUB_SAT sx hint(show SUB_SAT#_#%)        -- if $lsizenn(Jnn) <= `16
  | MUL                                      -- if $lsizenn(Jnn) >= `16
  | AVGR U hint(show AVGR#_#%)               -- if $lsizenn(Jnn) <= `16
  | Q15MULR_SAT S hint(show Q15MULR_SAT#_#%) -- if $lsizenn(Jnn) = `16
  | RELAXED_Q15MULR S hint(show RELAXED_Q15MULR#_#%) -- if $lsizenn(Jnn) = `16
  | MIN sx hint(show MIN#_#%)                -- if $lsizenn(Jnn) <= `32
  | MAX sx hint(show MAX#_#%)                -- if $lsizenn(Jnn) <= `32
syntax vbinop_(Fnn X M) = ADD | SUB | MUL | DIV | MIN | MAX | PMIN | PMAX
  | RELAXED_MIN | RELAXED_MAX

syntax vternop_(shape) hint(macro "%" "V%")
syntax vternop_(Jnn X M) = RELAXED_LANESELECT
syntax vternop_(Fnn X M) = RELAXED_MADD | RELAXED_NMADD

syntax vtestop_(shape) hint(macro "%" "V%")
syntax vtestop_(Jnn X M) = ALL_TRUE
;; syntax vtestop_(Fnn X N) = |           ;; uninhabited

syntax vrelop_(shape) hint(macro "%" "V%")
syntax vrelop_(Jnn X M) = EQ | NE
  | LT sx hint(show LT#_#%)  -- if $lsizenn(Jnn) =/= `64 \/ sx = S
  | GT sx hint(show GT#_#%)  -- if $lsizenn(Jnn) =/= `64 \/ sx = S
  | LE sx hint(show LE#_#%)  -- if $lsizenn(Jnn) =/= `64 \/ sx = S
  | GE sx hint(show GE#_#%)  -- if $lsizenn(Jnn) =/= `64 \/ sx = S
syntax vrelop_(Fnn X M) = EQ | NE | LT | GT | LE | GE

syntax vshiftop_(ishape) hint(macro "%" "V%")
syntax vshiftop_(Jnn X M) = SHL | SHR sx hint(show SHR#_#%)

syntax vswizzlop_(bshape) hint(macro "%" "V%")
syntax vswizzlop_(I8 X M) = SWIZZLE | RELAXED_SWIZZLE

syntax vextunop__(ishape_1, ishape_2) hint(macro "%" "V%")
syntax vextunop__(Jnn_1 X M_1, Jnn_2 X M_2) =
  | EXTADD_PAIRWISE sx hint(show EXTADD_PAIRWISE#_#%)
    -- if 16 <= $(2 * $lsizenn1(Jnn_1)) = $lsizenn2(Jnn_2) <= `32

syntax vextbinop__(ishape_1, ishape_2) hint(macro "%" "V%")
syntax vextbinop__(Jnn_1 X M_1, Jnn_2 X M_2) =
  | EXTMUL sx half__(Jnn_1 X M_1, Jnn_2 X M_2) hint(show EXTMUL#_#%#_#%)
    -- if $(2 * $lsizenn1(Jnn_1)) = $lsizenn2(Jnn_2) >= `16
  | DOT S hint(show DOT#_#%)
    -- if $(2 * $lsizenn1(Jnn_1)) = $lsizenn2(Jnn_2) = `32
  | RELAXED_DOT S hint(show RELAXED_DOT#_#%)
    -- if $(2 * $lsizenn1(Jnn_1)) = $lsizenn2(Jnn_2) = `16

syntax vextternop__(ishape_1, ishape_2) hint(macro "%" "V%")
syntax vextternop__(Jnn_1 X M_1, Jnn_2 X M_2) =
  | RELAXED_DOT_ADD S hint(show RELAXED_DOT_ADD#_#%)
    -- if $(4 * $lsizenn1(Jnn_1)) = $lsizenn2(Jnn_2) = `32

;; TODO(2, rossberg): internalise half and zero
syntax vcvtop__(shape_1, shape_2) hint(macro "%" "V%")
syntax vcvtop__(Jnn_1 X M_1, Jnn_2 X M_2) =
  | EXTEND sx hint(show EXTEND#_#%)
    -- if $lsizenn2(Jnn_2) = $(2 * $lsizenn1(Jnn_1))
syntax vcvtop__(Jnn_1 X M_1, Fnn_2 X M_2) =
  | CONVERT sx hint(show CONVERT#_#%)
    -- if $sizenn2(Fnn_2) >= $lsizenn1(Jnn_1) = `32
syntax vcvtop__(Fnn_1 X M_1, Jnn_2 X M_2) =
  | TRUNC_SAT sx hint(show TRUNC_SAT#_#%)
    -- if $sizenn1(Fnn_1) >= $lsizenn2(Jnn_2) = `32
  | RELAXED_TRUNC sx hint(show RELAXED_TRUNC#_#%)
    -- if $sizenn1(Fnn_1) >= $lsizenn2(Jnn_2) = `32
syntax vcvtop__(Fnn_1 X M_1, Fnn_2 X M_2) =
  | DEMOTE    -- if $sizenn1(Fnn_1) > $sizenn2(Fnn_2)
  | PROMOTE   -- if $sizenn1(Fnn_1) < $sizenn2(Fnn_2)


;; Memory operators

syntax memarg hint(desc "memory argument") = {ALIGN u32, OFFSET u32}

var ao : memarg

syntax loadop_(numtype)
syntax loadop_(Inn) = sz _ sx hint(show %0#_#%2) -- if sz < $sizenn(Inn)

syntax storeop_(numtype)
syntax storeop_(Inn) = sz                        -- if sz < $sizenn(Inn)

syntax vloadop_(vectype) hint(macro "%" "L%") =
  | SHAPE sz X dim _ sx  hint(show %1#X#%3#_#%5) hint(macro "%shape") -- if $(sz * dim = $vsize(vectype)/2) /\ dim >= `2
  | SPLAT sz           hint(show %#_#SPLAT)
  | ZERO sz            hint(show %#_#ZERO) -- if sz >= `32


;; Block types

syntax blocktype hint(desc "block type") =
  | _RESULT valtype?
  | _IDX funcidx

var bt : blocktype


;; Instructions

syntax instr hint(desc "instruction")

var in : instr

syntax instr/parametric hint(desc "parametric instruction") =
  | NOP
  | UNREACHABLE
  | DROP
  | SELECT valtype*?
  | ...

syntax instr/block hint(desc "block instruction") = ...
  | BLOCK blocktype instr*
  | LOOP blocktype instr*
  | IF blocktype instr* ELSE instr*
  | ...

syntax instr/br hint(desc "branch instruction") = ...
  | BR labelidx
  | BR_IF labelidx
  | BR_TABLE labelidx* labelidx
  | BR_ON_NULL labelidx
  | BR_ON_NON_NULL labelidx
  | BR_ON_CAST labelidx reftype reftype
  | BR_ON_CAST_FAIL labelidx reftype reftype
  | ...

syntax instr/call hint(desc "function instruction") = ...
  | CALL funcidx
  | CALL_REF typeuse
  | CALL_INDIRECT tableidx typeuse
  | RETURN
  | RETURN_CALL funcidx
  | RETURN_CALL_REF typeuse
  | RETURN_CALL_INDIRECT tableidx typeuse
  | ...

syntax instr/num hint(desc "numeric instruction") = ...
  | CONST numtype num_(numtype)      hint(show %.CONST %)
  | UNOP numtype unop_(numtype)      hint(show %.##%)
  | BINOP numtype binop_(numtype)    hint(show %.##%)
  | TESTOP numtype testop_(numtype)  hint(show %.##%)
  | RELOP numtype relop_(numtype)    hint(show %.##%)
  | CVTOP numtype_1 numtype_2 cvtop__(numtype_2, numtype_1)  hint(show %1.##%3#_#%2)
  | ...

syntax instr/vec hint(desc "vector instruction") = ...
  | VCONST vectype vec_(vectype)        hint(show %.CONST %)
  | VVUNOP vectype vvunop               hint(show %.##%)
  | VVBINOP vectype vvbinop             hint(show %.##%)
  | VVTERNOP vectype vvternop           hint(show %.##%)
  | VVTESTOP vectype vvtestop           hint(show %.##%)
  | VUNOP shape vunop_(shape)           hint(show ##%.##%)
  | VBINOP shape vbinop_(shape)         hint(show ##%.##%)
  | VTERNOP shape vternop_(shape)       hint(show ##%.##%)
  | VTESTOP shape vtestop_(shape)       hint(show ##%.##%)
  | VRELOP shape vrelop_(shape)         hint(show ##%.##%)
  | VSHIFTOP ishape vshiftop_(ishape)   hint(show ##%.##%)
  | VBITMASK ishape                     hint(show ##%.BITMASK)   hint(macro "VBITMASK")
  | VSWIZZLOP bshape vswizzlop_(bshape) hint(show ##%.##%)
  | VSHUFFLE bshape laneidx*            hint(show ##%.SHUFFLE %) hint(macro "VSHUFFLE")
    -- if |laneidx*| = $dim(bshape)
  | VEXTUNOP ishape_1 ishape_2 vextunop__(ishape_2, ishape_1)
    hint(show ##%1.##%3#_# ##%2)
  | VEXTBINOP ishape_1 ishape_2 vextbinop__(ishape_2, ishape_1)
    hint(show ##%1.##%3#_# ##%2)
  | VEXTTERNOP ishape_1 ishape_2 vextternop__(ishape_2, ishape_1)
    hint(show ##%1.##%3#_# ##%2)
  | VNARROW ishape_1 ishape_2 sx        hint(show ##%.NARROW#_# ##%#_#%) hint(macro "VNARROW")
    -- if $($lsize($lanetype(ishape_2)) = 2*$lsize($lanetype(ishape_1)) <= `32)
  | VCVTOP shape_1 shape_2 vcvtop__(shape_2, shape_1) half__(shape_2, shape_1)? zero__(shape_2, shape_1)?
    ;; TODO(1, rossberg): fix overlong line
    hint(show ##%1.%3#_# ##%2)
    hint(show ##%1.%3#_# ##%2#_#%4)        ;; TODO(2, rossberg): this is wrong when half is absent
    hint(show ##%1.%3#_#%5#_# ##%2#_#%4)   ;; TODO(2, rossberg): this is wrong when half is present
  | VSPLAT shape                        hint(show ##%.SPLAT) hint(macro "VSPLAT")
  | VEXTRACT_LANE shape sx? laneidx     hint(show ##%.EXTRACT_LANE %) hint(show ##%.EXTRACT_LANE#_#% %) hint(macro "VEXTRACT_LANE")
    -- if sx? = eps <=> $lanetype(shape) <- I32 I64 F32 F64
  | VREPLACE_LANE shape laneidx         hint(show ##%.REPLACE_LANE %) hint(macro "VREPLACE_LANE")
  | ...

syntax instr/ref hint(desc "reference instruction") = ...
  | REF.NULL heaptype
  | REF.IS_NULL
  | REF.AS_NON_NULL
  | REF.EQ
  | REF.TEST reftype
  | REF.CAST reftype
  | ...

syntax instr/func hint(desc "function reference instruction") = ...
  | REF.FUNC funcidx
  | ...

syntax instr/i31 hint(desc "scalar reference instruction") = ...
  | REF.I31
  | I31.GET sx                      hint(show I31.GET#_#%)
  | ...

syntax instr/struct hint(desc "structure reference instruction") = ...
  | STRUCT.NEW typeidx
  | STRUCT.NEW_DEFAULT typeidx
  | STRUCT.GET sx? typeidx u32      hint(show STRUCT.GET#_#% % %)
  | STRUCT.SET typeidx u32
  | ...

syntax instr/array hint(desc "array reference instruction") = ...
  | ARRAY.NEW typeidx
  | ARRAY.NEW_DEFAULT typeidx
  | ARRAY.NEW_FIXED typeidx u32
  | ARRAY.NEW_DATA typeidx dataidx
  | ARRAY.NEW_ELEM typeidx elemidx
  | ARRAY.GET sx? typeidx           hint(show ARRAY.GET#_#% %)
  | ARRAY.SET typeidx
  | ARRAY.LEN
  | ARRAY.FILL typeidx
  | ARRAY.COPY typeidx typeidx
  | ARRAY.INIT_DATA typeidx dataidx
  | ARRAY.INIT_ELEM typeidx elemidx
  | ...

syntax instr/extern hint(desc "external reference instruction") = ...
  | EXTERN.CONVERT_ANY
  | ANY.CONVERT_EXTERN
  | ...

syntax instr/local hint(desc "local instruction") = ...
  | LOCAL.GET localidx
  | LOCAL.SET localidx
  | LOCAL.TEE localidx
  | ...

syntax instr/global hint(desc "global instruction") = ...
  | GLOBAL.GET globalidx
  | GLOBAL.SET globalidx
  | ...

syntax instr/table hint(desc "table instruction") = ...
  | TABLE.GET tableidx
  | TABLE.SET tableidx
  | TABLE.SIZE tableidx
  | TABLE.GROW tableidx
  | TABLE.FILL tableidx
  | TABLE.COPY tableidx tableidx
  | TABLE.INIT tableidx elemidx
  | ...

syntax instr/elem hint(desc "element instruction") = ...
  | ELEM.DROP elemidx
  | ...

syntax instr/memory hint(desc "memory instruction") = ...
  | LOAD numtype loadop_(numtype)? memidx memarg   hint(show %.LOAD % %) hint(show %.LOAD# ##% % %)
  | STORE numtype storeop_(numtype)? memidx memarg hint(show %.STORE % %) hint(show %.STORE#% % %)
  | VLOAD vectype vloadop_(vectype)? memidx memarg hint(show %.LOAD % %) hint(show %.LOAD# ##% % %) hint(macro "V%")
  | VLOAD_LANE vectype sz memidx memarg laneidx    hint(show %.LOAD#%#_#LANE % % %) hint(macro "V%")
  | VSTORE vectype memidx memarg                   hint(show %.STORE % %) hint(macro "V%")
  | VSTORE_LANE vectype sz memidx memarg laneidx   hint(show %.STORE#%#_#LANE % % %) hint(macro "V%")
  | MEMORY.SIZE memidx
  | MEMORY.GROW memidx
  | MEMORY.FILL memidx
  | MEMORY.COPY memidx memidx
  | MEMORY.INIT memidx dataidx
  | ...

syntax instr/data hint(desc "data instruction") = ...
  | DATA.DROP dataidx
  | ...


;; Expressions

syntax expr hint(desc "expression") =
  instr*

var e : expr


;;
;; Modules
;;

syntax elemmode hint(desc "element mode") hint(macro "%" "E%") = ACTIVE tableidx expr | PASSIVE | DECLARE
syntax datamode hint(desc "data mode") hint(macro "%" "D%") = ACTIVE memidx expr | PASSIVE

syntax type hint(desc "type definition") = TYPE rectype
syntax local hint(desc "local") = LOCAL valtype
syntax func hint(desc "function") = FUNC typeidx local* expr
syntax global hint(desc "global") = GLOBAL globaltype expr
syntax table hint(desc "table") = TABLE tabletype expr
syntax mem hint(desc "memory") = MEMORY memtype
syntax tag hint(desc "tag") = TAG typeidx
syntax elem hint(desc "table segment") = ELEM reftype expr* elemmode
syntax data hint(desc "memory segment") = DATA byte* datamode
syntax start hint(desc "start function") = START funcidx

syntax export hint(desc "export") = EXPORT name externidx
syntax import hint(desc "import") = IMPORT name name externtype

syntax module hint(desc "module") =
  MODULE type* import* func* global* table* mem* tag* elem* data* start? export*


var ty : type
var loc : local
var glob : global
var tab : table
var im : import
var ex : export
