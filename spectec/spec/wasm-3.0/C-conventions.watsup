;;
;; Auxiliary definitions used for describing meta notation
;;

;; Syntax notation

syntax A hint(macro none) = nat
syntax B hint(macro none) = nat

syntax sym hint(macro none) = _FIRST A_1 | _DOTS hint(show `...) | _LAST A_n
syntax symsplit/1 hint(show sym) hint(macro none) = _FIRST A_1 | ...
syntax symsplit/2 hint(show sym) hint(macro none) = ... | _LAST A_2

syntax recorddots hint(show !%) = ()
syntax record hint(show r) hint(macro none none) =
  { FIELD_1 A_1 hint(show FIELD_ 1), \
    FIELD_2 A_2 hint(show FIELD_ 2), \
    `... recorddots }

syntax pth hint(macro none) = PTHSYNTAX hint(show (`[i] `| !%.FIELD)+)


;; Validation notation

syntax T hint(macro none) = nat

relation NotationTypingPremise: nat
relation NotationTypingPremisedots: `... hint(macro none)
relation NotationTypingScheme: nat

rule NotationTypingScheme:
  conclusion
  -- NotationTypingPremise: premise_1
  -- NotationTypingPremise: premise_2
  -- NotationTypingPremisedots: `...
  -- NotationTypingPremise: premise_n

relation NotationTypingInstrScheme: context |- instr* : functype hint(macro none)

rule NotationTypingInstrScheme/i32.add:
  C |- BINOP I32 ADD : I32 I32 -> I32

rule NotationTypingInstrScheme/global.get:
  C |- GLOBAL.GET x : eps -> t
  -- if C.GLOBALS[x] = mut t

rule NotationTypingInstrScheme/block:
  C |- BLOCK blocktype instr* : t_1* -> t_2*
  -- Blocktype_ok: C |- blocktype : t_1* -> t_2*
  -- NotationTypingInstrScheme: {LABELS (t_2*)} ++ C |- instr* : t_1* -> t_2*


;; Execution notation

relation NotationReduct: ~> instr* hint(tabular)

rule NotationReduct/2:
  ~> (CONST F64 q_1) (CONST F64 q_4) (CONST F64 q_3) $($(BINOP F64 ADD)) $($(BINOP F64 MUL))

rule NotationReduct/3:
  ~> (CONST F64 q_1) (CONST F64 q_5) $($(BINOP F64 MUL))

rule NotationReduct/4:
  ~> (CONST F64 q_6)


;; Frames and Labels

def $instrdots : instr* hint(show `...)

syntax label hint(desc "label") = LABEL_ n `{instr*}  hint(show LABEL_%#%)
syntax callframe hint(desc "call frame") = FRAME_ n `{frame}   hint(show FRAME_%#%)

var L : label


;; Allocation

def $allocX(syntax X, syntax Y, store, X, Y) : (store, addr) hint(macro none)
def $allocXs(syntax X, syntax Y, store, X*, Y*) : (store, addr*) hint(show $allocX*#((%3, %4, %5))) hint(macro none)
def $allocXs(syntax X, syntax Y, s, eps, eps) = (s, eps)
def $allocXs(syntax X, syntax Y, s, X X'*, Y Y'*) = (s_2, a a'*)
  -- if (s_1, a) = $allocX(syntax X, syntax Y, s, X, Y)
  -- if (s_2, a'*) = $allocXs(syntax X, syntax Y, s_1, X'*, Y'*)

(;
def $detstores(store, store*) : store hint(show %)  ;; HACK!
def $detaddrs(addr, addr*) : addr hint(show %)      ;; HACK!
def $allocX2(syntax X, syntax Y, store, X, Y) : (store, addr) hint(show $allocX(%3, %4, %5)) hint(macro none)
def $allocXs2(syntax X, syntax Y, store, X*, Y*) : (store, addr*) hint(show $allocX*#((%3, %4, %5))) hint(macro none)
def $allocXs2(syntax X, syntax Y, s*[0], X^n, Y^n) = (s*[n], a^n)
  -- if ($detstores(s*[i+1], s*), $detaddrs(a^n[i], a^n)) = $allocX2(syntax X, syntax Y, s*[i], X^n[i], Y^n[i])
;)
(;
.. math::
   \begin{array}{rlll}
   \alloctype^\ast(\rectype^n) = \deftype^\ast \\[1ex]
   \mbox{where for all $i < n$:} \hfill \\
   \rectype^n[i] &=& \REC~\subtype_i^{m_i} \\
   \deftype^\ast[x_i \slice m_i] &=& \rolldt_{x_i}^\ast(\REC~\subtype_i^{m_i})[\subst \deftype^\ast[0 \slice x_i]] \\
   x_{i+1} &=& x_i + m_i \\
   x_n &=& |\deftype^\ast| \\
   \end{array}
;)


;; Binary format

grammar Btypewriter : () hint(macro none) = 0x00 => ()

syntax symdots hint(show `...) hint(macro none) = 0
def $var(syntax X) : nat hint(show %) hint(macro none) def $var(syntax X) = 0x00
grammar Bvar(syntax X) : () hint(show %) hint(macro none) = 0x00 => ()
grammar Bsym : A hint(macro none) = Bvar(B_1) => $var(A_1) | Bvar(symdots) | Bvar(B_n) => $var(A_n)
