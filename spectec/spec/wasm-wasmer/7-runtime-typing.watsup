;;
;; Typing values
;;

relation Num_type: store |- num : numtype
relation Vec_type: store |- vec : vectype
relation Ref_type: store |- ref : reftype
relation Val_type: store |- val : valtype

rule Num_type:
  s |- CONST nt c : nt

rule Vec_type:
  s |- VCONST vt c : vt


rule Ref_type/null:
  s |- REF.NULL ht : (REF NULL ht)

;;rule Ref_type/func:
;;  s |- REF.FUNC_ADDR a : (REF eps dt)
;;  -- if s.FUNCS[a].TYPE = dt

;;rule Ref_type/extern:
;;  s |- REF.EXTERN addrref : (REF eps EXTERN)



rule Val_type/num:
  s |- num : nt
  -- Num_type: s |- num : nt

rule Val_type/vec:
  s |- vec : vt
  -- Vec_type: s |- vec : vt

rule Val_type/ref:
  s |- ref : rt
  -- Ref_type: s |- ref : rt


;;
;; Typing external addresses
;;

relation Externaddr_type: store |- externaddr : externtype

rule Externaddr_type/func:
  s |- FUNC a : FUNC funcinst.TYPE
  -- if s.FUNCS[a] = funcinst

rule Externaddr_type/global:
  s |- GLOBAL a : GLOBAL globalinst.TYPE
  -- if s.GLOBALS[a] = globalinst

rule Externaddr_type/table:
  s |- TABLE a : TABLE tableinst.TYPE
  -- if s.TABLES[a] = tableinst

rule Externaddr_type/mem:
  s |- MEM a : MEM meminst.TYPE
  -- if s.MEMS[a] = meminst

rule Externaddr_type/sub:
  s |- externaddr : xt
  -- Externaddr_type: s |- externaddr : xt'
  -- Externtype_sub: {} |- xt' <: xt
